This patch was created against the Linux 2.6.10-rc2-bk9 kernel sources.
It was manually authored to create maximal compatibility with future kernels.
It should work for kernel 2.6.9 and higher.


diff -rU1 a/arch/i386/kernel/entry.S b/arch/i386/kernel/entry.S
--- a/arch/i386/kernel/entry.S	2004-11-25 22:33:47.098332528 +0100
+++ b/arch/i386/kernel/entry.S	2004-11-25 22:37:22.506585496 +0100
@@ -800,3 +800,3 @@
 	.long sys_ni_syscall	/* reserved for TUX */
-	.long sys_ni_syscall
+	.long sys_athomux_lrpc
 	.long sys_gettid
diff -rU0 a/arch/um/include/sysdep-i386/syscalls.h b/arch/um/include/sysdep-i386/syscalls.h
--- a/arch/um/include/sysdep-i386/syscalls.h	2004-11-23 15:33:44.124359000 +0100
+++ b/arch/um/include/sysdep-i386/syscalls.h	2004-11-25 22:45:22.595600872 +0100
@@ -41 +41,2 @@
-        [ 222 ] = (syscall_handler_t *) sys_ni_syscall,
+        [ 222 ] = (syscall_handler_t *) sys_ni_syscall, \
+        [ __NR_athomux_lrpc ] = (syscall_handler_t *) sys_athomux_lrpc,
@@ -45 +46 @@
-#define LAST_ARCH_SYSCALL 222
+#define LAST_ARCH_SYSCALL 224
diff -rU0 a/include/asm-i386/unistd.h b/include/asm-i386/unistd.h
--- a/include/asm-i386/unistd.h	2004-11-25 22:33:49.493968336 +0100
+++ b/include/asm-i386/unistd.h	2004-11-25 22:37:33.690885224 +0100
@@ -231 +231 @@
-/* 223 is unused */
+#define __NR_athomux_lrpc	223
diff -rU1 a/include/asm-x86_64/unistd.h b/include/asm-x86_64/unistd.h
--- a/include/asm-x86_64/unistd.h	2004-11-23 15:33:51.463244000 +0100
+++ b/include/asm-x86_64/unistd.h	2004-11-25 22:42:11.889592592 +0100
@@ -558,4 +558,6 @@
 __SYSCALL(__NR_waitid, sys_waitid)
+#define __NR_athomux_lrpc	248
+__SYSCALL(__NR_athomux_lrpc, sys_athomux_lrpc)
 
-#define __NR_syscall_max __NR_waitid
+#define __NR_syscall_max __NR_athomux_lrpc
 #ifndef __NO_STUBS
diff -rU1 a/include/linux/syscalls.h b/include/linux/syscalls.h
--- a/include/linux/syscalls.h	2004-11-25 22:33:49.765926992 +0100
+++ b/include/linux/syscalls.h	2004-11-25 22:37:38.102214600 +0100
@@ -493,2 +493,3 @@
 asmlinkage long sys_ni_syscall(void);
+asmlinkage long sys_athomux_lrpc(unsigned long id, void *args, char *param);
 
diff -rU1 a/kernel/Makefile b/kernel/Makefile
--- a/kernel/Makefile	2004-11-25 22:33:49.822918328 +0100
+++ b/kernel/Makefile	2004-11-25 23:04:23.383174800 +0100
@@ -11,2 +11,3 @@
 
+obj-y += syscallstub.o
 obj-$(CONFIG_FUTEX) += futex.o
diff -rNU0 a/kernel/syscallstub.c b/kernel/syscallstub.c
--- a/kernel/syscallstub.c	1970-01-01 01:00:00.000000000 +0100
+++ b/kernel/syscallstub.c	2004-11-25 22:37:38.103214448 +0100
@@ -0,0 +1,88 @@
+/* syscallstub.c: module providable syscall stub management
+ *
+ * Copyright (C) 2003 Red Hat, Inc. All Rights Reserved.
+ * Written by David Howells (dhowells@redhat.com)
+ * Adapted by Jens-Christian Korth for the ATHOMUX project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version
+ * 2 of the License, or (at your option) any later version.
+ */
+#include <linux/module.h>
+#include <linux/spinlock.h>
+#include <linux/errno.h>
+
+typedef long (*athomux_lrpc_syscall_handler_t)(unsigned long id, void *args, char *param);
+
+/*
+ * ATHOMUX system call stub management
+ */
+static athomux_lrpc_syscall_handler_t	athomux_syscall_handler;
+static struct module			*athomux_syscall_owner;
+static rwlock_t				athomux_syscall_handler_lock = RW_LOCK_UNLOCKED;
+
+int register_athomux_syscall_handler(athomux_lrpc_syscall_handler_t handler, struct module *owner)
+{
+	int ret;
+
+	if (!handler || !owner)
+		return -EINVAL;
+
+	ret = -EEXIST;
+	write_lock(&athomux_syscall_handler_lock);
+
+	if (!athomux_syscall_handler) {
+		athomux_syscall_handler	= handler;
+		athomux_syscall_owner	= owner;
+		ret = 0;
+	}
+
+	write_unlock(&athomux_syscall_handler_lock);
+
+	return ret;
+}
+
+EXPORT_SYMBOL(register_athomux_syscall_handler);
+
+void unregister_athomux_syscall_handler(athomux_lrpc_syscall_handler_t handler, struct module *owner)
+{
+	write_lock(&athomux_syscall_handler_lock);
+
+	if (athomux_syscall_handler==handler && athomux_syscall_owner==owner) {
+		athomux_syscall_handler	= NULL;
+		athomux_syscall_owner	= NULL;
+	}
+	else {
+		printk("module %s tried to free ATHOMUX LRPC syscall which it did not own\n",
+		       owner->name);
+	}
+
+	write_unlock(&athomux_syscall_handler_lock);
+}
+
+EXPORT_SYMBOL(unregister_athomux_syscall_handler);
+
+asmlinkage long sys_athomux_lrpc(unsigned long id, void *args, char *param)
+{
+	athomux_lrpc_syscall_handler_t handler;
+	struct module *owner;
+	int ret;
+  
+	ret = -ENOSYS;
+	read_lock(&athomux_syscall_handler_lock);
+	handler = athomux_syscall_handler;
+	owner = athomux_syscall_owner;
+	if (handler && try_module_get(owner))
+			ret = 0;
+	read_unlock(&athomux_syscall_handler_lock);
+
+	if (ret<0)
+		return ret;
+
+	ret = handler(id, args, param);
+
+	module_put(owner);
+	return ret;
+}
+
