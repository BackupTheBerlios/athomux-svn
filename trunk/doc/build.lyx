#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme times
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4wide
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

The Build System of Athomux
\layout Author

Thomas Schöbel-Theuer
\layout Date

Version 0.08, 15 Dec 2004
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Purpose
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
sloppy 
\end_inset 

Athomux uses its own 
\family typewriter 
make
\family default 
 system for building many different variants and configurations.
 The reason is manyfold: tools like 
\family typewriter 
autoconf
\family default 
 and 
\family typewriter 
automake
\family default 
 are taylored to userland, and Linux kernel configuration uses a 
\emph on 
component software
\emph default 
 paradigm.
 However, Athomux does not only exceed the component paradigm by a LEGO-like
 brickware paradigm, but also may be configured to run in different environments.
 Examples are guest environments running in Linux userland, or running in
 kernelspace, or running standalone.
 Therefore we need a build system capable of producing code for each of
 those environments.
\layout Standard

The current build system is however not based on specifications of build
 environments or target architectures and the like, but rather allows descriptio
n of 
\emph on 
variants
\emph default 
 for two phases of the build process: the Athomux preprocessor phase configurati
on (called 
\family typewriter 
pconf
\family default 
 for short), and the C-compiler phase configuration (called 
\family typewriter 
cconf
\family default 
).
 For each of these phases, any number of variants may be specified.
 The 
\emph on 
meaning
\emph default 
 of a variant should be captured by its name.
\layout Standard

To understand this document, you should have read some basic papers on the
 architecture of ATHOMUX, and you should be familiar with 
\family typewriter 
Makefile
\family default 
s (some knowledge of Perl may also help).
 Currently the description is very brief; you can help yourself by reading
 example code.
 A lot of stuff is missing; this document may soon be outdated.
\layout Section

Invocation
\layout Subsection

Invocation in General
\layout Standard


\family typewriter 
cd src; make
\layout Standard

Build all systems and all variants.
\layout Standard
\noindent 

\family typewriter 
cd src; make 
\family default 
\emph on 
pconf_name
\family typewriter 
\emph default 
/
\family default 
\emph on 
cconf_name
\family typewriter 
\emph default 
/
\family default 
\emph on 
target_name
\layout Standard

Build a specific target (
\emph on 
target_name
\emph default 
) for a specific preprocessor configuration (
\emph on 
pconf_name
\emph default 
) and a specific C-compiler configuration (
\emph on 
cconf_name
\emph default 
).
\layout Subsection

Target specific Options
\layout Standard

The ATHOMUX Linux kernelspace port requires a set of configured Linux kernel
 sources.
 If not explicit specified, the build system uses the sources of the current
 kernel.
 Different kernel sources can be specified by appending 
\family typewriter 
LINSRC=
\family default 
\emph on 
/path/to/kernel/sources
\emph default 
 to the 
\family typewriter 
make
\family default 
 command.
 To specify 
\emph on 
cconf
\emph default 
 dependent kernel sources, the 
\emph on 
cconf_name
\family typewriter 
\emph default 
_LINSRC
\family default 
 option can be used.
\layout Standard

To create Linux kernel modules, a kernel-dependent tool called 
\family typewriter 
modpost
\family default 
 is required.
 Because of some portability and permission issues, the current build system
 uses a hack to avoid 
\family typewriter 
modpost
\family default 
.
 If you run into problems compiling the 
\family typewriter 
athomux.ko
\family default 
 modules, you can reenable the usage of 
\family typewriter 
modpost
\family default 
 by appending 
\family typewriter 
USE_MODPOST=1
\family default 
 to the 
\family typewriter 
make
\family default 
 command.
\layout Standard
\align left 
Example:
\family typewriter 
 make klinux-i386 LINSRC=/usr/src/linux USE_MODPOST=1
\layout Section

Configuration
\layout Subsection

Basic Config Files
\layout Subsubsection


\family typewriter 
pconf
\layout Standard

By creating a file 
\family typewriter 
pconf.
\emph on 
mypconfname
\family default 
\emph default 
 in the 
\family typewriter 
src
\family default 
 directory, the 
\family typewriter 
make
\family default 
 system will notice that a new preprocessor configuration variant with name
 
\family typewriter 
\emph on 
mypconfname
\family default 
\emph default 
 exists.
 As a result, a directory named 
\family typewriter 
\emph on 
mypconfname
\family default 
\emph default 
 will be automatically created as a subdirectory of 
\family typewriter 
src
\family default 
.
\layout Standard

The file 
\family typewriter 
pconf.
\emph on 
mypconfname
\family default 
\emph default 
 can contain arbitray makefile rules, macro definitions, and so on, usually
 for invocation of the Athomux preprocessor 
\family typewriter 
pre.pl
\family default 
.
 These rules are included in the global Makefile via an automatically generated
 intermediate include-file 
\family typewriter 
defs.make
\family default 
.
 When you write different 
\family typewriter 
pconf.*
\family default 
 files, all of their contents will be concatenated into 
\family typewriter 
defs.make
\family default 
, resulting in a single set of make rules.
 Thus make sure to avoid name clashes between different 
\family typewriter 
pconf.*
\family default 
 versions.
\layout Standard

As extension of ordinary 
\family typewriter 
Makefile
\family default 
 rules, any occurence of 
\family typewriter 
$(pconf)
\family default 
 in a 
\family typewriter 
pconf.
\emph on 
mypconfname
\family default 
\emph default 
 will be replaced by 
\family typewriter 
\emph on 
mypconfname
\family default 
\emph default 
.
 However notice that this replacement is done by the Perl script generating
 
\family typewriter 
defs.make
\family default 
.
 Thus, it is possible to create parameterized macro names like 
\family typewriter 
$(CFLAGS_$(pconf))
\family default 
 which will expand to $(CFLAGS_mypconfname).
 This way, you can separate name spaces of different versions.
\layout Standard

It is highly recommended to do that with any kind of macros which could
 be different for different 
\family typewriter 
pconf.*
\family default 
 versions.
\layout Subsubsection


\family typewriter 
cconf
\layout Standard

By creating a file 
\family typewriter 
cconf.
\emph on 
mycconfname
\family default 
\emph default 
 in the 
\family typewriter 
src
\family default 
 directory, the 
\family typewriter 
make
\family default 
 system will be informed about the existence of a new C-configuration variant.
 As a result, a directory named 
\family typewriter 
\emph on 
mypconfname/mycconfname
\family default 
\emph default 
 will be created automatically.
 By default, the full cartesian product of all 
\family typewriter 
pconf.*
\family default 
 and 
\family typewriter 
cconf.*
\family default 
 will be created.
\layout Standard

A 
\family typewriter 
cconf.*
\family default 
 can also contain arbitrary makefile rules, usually for invoking the C compiler.
\layout Standard

Inside of a 
\family typewriter 
cconf.
\emph on 
mycconfname
\family default 
\emph default 
, the pseudo-macros 
\family typewriter 
$(pconf)
\family default 
 and 
\family typewriter 
$(cconf)
\family default 
 can be used to denote the names of the current pconf and cconf variant,
 respectively.
 It is in particular recommended to parameterize makefile rules at least
 at the pconf level, because of the cartesian product with new 
\family typewriter 
pconf.*
\family default 
 files which might be introduced at a later time.
\layout Subsubsection


\family typewriter 
target
\layout Standard

By creating a file 
\family typewriter 
target.
\emph on 
mytargetname
\family default 
\emph default 
 in the 
\family typewriter 
src
\family default 
 directory, the 
\family typewriter 
make
\family default 
 system will be informed about the existence of a new 
\family typewriter 
make
\family default 
 target.
 As a result, you can say 
\family typewriter 
make 
\emph on 
mypconfname
\emph default 
/
\emph on 
mycconfname
\emph default 
/
\emph on 
mytargetname
\family default 
\emph default 
 for any combination of 
\family typewriter 
pconf.*
\family default 
, 
\family typewriter 
cconf.*
\family default 
 and 
\family typewriter 
target.*
\family default 
 (by default).
 When you just type 
\family typewriter 
make
\family default 
 without any parameter, the full cartesian product of all pconfs, cconfs
 and targets will be built (by default).
\layout Standard

Usually 
\family typewriter 
target.*
\family default 
 will contain makefile rules for linking together an executable, configuring
 and building a bootable image or the like.
 As before, the pseudo-macros 
\family typewriter 
$(pconf)
\family default 
 and 
\family typewriter 
$(cconf)
\family default 
 can be used.
 Additionally, the pseudo-macro 
\family typewriter 
$(target)
\family default 
 is available for parameterization of 
\family typewriter 
\emph on 
mytargetname
\family default 
\emph default 
.
\layout Subsubsection

Buildrules Embedded in 
\family typewriter 
*.ath
\layout Standard

Further makefile rules can be added to 
\family typewriter 
defs.make
\family default 
 by statements of the following form in a 
\family typewriter 
*.ath
\family default 
 source file which must appear immediately 
\emph on 
before
\emph default 
 the 
\family typewriter 
brick
\family default 
 statement:
\layout Standard
\noindent 

\family typewriter 
buildrules 
\family default 
\emph on 
kind
\family typewriter 
\emph default 
:
\family default 
 
\emph on 
makefile-rules-text
\emph default 
....
\family typewriter 

\backslash 
n endrules
\layout Standard

where 
\emph on 
kind
\emph default 
 is one of the keywords 
\family typewriter 
global
\family default 
, 
\family typewriter 
pconf
\family default 
, 
\family typewriter 
cconf
\family default 
, or 
\family typewriter 
target
\family default 
.
\layout Standard

In a 
\family typewriter 
global
\family default 
 buildrule, no pseudo-macros are defined at all.
 In a 
\family typewriter 
pconf
\family default 
 buildrule, only 
\family typewriter 
$(pconf)
\family default 
 can be used.
 In a 
\family typewriter 
cconf
\family default 
 buildrule, both 
\family typewriter 
$(pconf)
\family default 
 and 
\family typewriter 
$(cconf)
\family default 
 can be used.
 In a 
\family typewriter 
target
\family default 
 buildrule, all three pseudo-macros including 
\family typewriter 
$(target)
\family default 
 can be used.
\layout Standard

Notice that depending on the 
\emph on 
kind
\emph default 
, the number of copies of the 
\emph on 
makefile-rules-text
\emph default 
 may vary drastically.
 For 
\family typewriter 
buildrules target:
\family default 
, the full cartesian product of all pconfs, cconfs and targets will be generated
 and copied into 
\family typewriter 
defs.make
\family default 
.
 Please make sure that no name clashes can occur due to multiple unparameterized
 copies of the same 
\emph on 
makefile-rules-text.
\layout Standard

Please try to prefer the 
\family typewriter 
pconf.*
\family default 
, 
\family typewriter 
cconf.*
\family default 
 and 
\family typewriter 
target.*
\family default 
 files in preference of 
\family typewriter 
*.ath
\family default 
 buildrules.
 Only when some specific bricks (e.g.
 machine- or target-specific bricks) need additional makefile support, use
 
\family typewriter 
buildrules
\family default 
 statements.
\layout Standard

The most common usage for 
\family typewriter 
buildrules
\family default 
 is linking with external libraries, invocation of 
\family typewriter 
make
\family default 
 on foreign source trees (e.g.
 foreign device drivers), and the like.
\layout Subsection

Filtering
\layout Standard

The creation of the 
\emph on 
full
\emph default 
 cartesian product of all 
\family typewriter 
pconf.*
\family default 
, 
\family typewriter 
cconf.*
\family default 
 and 
\family typewriter 
target.*
\family default 
 can be restricted by filtering.
\layout Subsubsection

General Filters
\layout Standard

In a 
\family typewriter 
pconf.*
\family default 
, 
\family typewriter 
cconf.*
\family default 
, 
\family typewriter 
target.*
\family default 
 oder 
\family typewriter 
*.ath
\family default 
 source file, you can add statements of the form
\layout Standard
\noindent 

\family typewriter 
#context pconf: 
\family default 
\emph on 
regex-list
\layout Standard
\noindent 

\family typewriter 
#context cconf: 
\family default 
\emph on 
regex-list
\layout Standard
\noindent 

\family typewriter 
#context target: 
\family default 
\emph on 
regex-list
\layout Standard
\noindent 

\family typewriter 
#context ath: 
\family default 
\emph on 
regex-list
\layout Standard

(see also the Athomux Preprocessor Guide).
 The 
\emph on 
regex-list
\emph default 
 is a comma-separated list of Perl regular expressions, each of them potentially
 matching the 
\emph on 
name
\emph default 
 part of a 
\family typewriter 
pconf.
\family default 
\emph on 
name
\emph default 
, 
\family typewriter 
cconf.
\family default 
\emph on 
name
\emph default 
, 
\family typewriter 
target.
\family default 
\emph on 
name
\emph default 
, or 
\emph on 
name
\family typewriter 
\emph default 
.ath
\family default 
 as a whole.
 When a regex is preceded by 
\family typewriter 
!
\family default 
 (exclamation mark), the corresponding combination of the current source
 file with the matching source file will be excluded from, otherwise it
 will be included to the combinations which should be built.
 The rules are processed 
\emph on 
in sequence
\emph default 
, such that later regexes will override the effects of earlier regexes.
\layout Standard

Note: normally, in 
\family typewriter 
pconf.
\family default 
\emph on 
myname
\emph default 
, you can filter any possible combination with 
\family typewriter 
cconf.*
\family default 
, 
\family typewriter 
target.*
\family default 
 and 
\family typewriter 
*.ath
\family default 
.
 Filtering against any other 
\family typewriter 
pconf.*
\family default 
 is senseless, but filtering against 
\family typewriter 
pconf.
\family default 
\emph on 
myname
\emph default 
 (
\begin_inset Quotes eld
\end_inset 

yourself
\begin_inset Quotes erd
\end_inset 

) is possible.
 The latter case is however only useful for filtering with generic shell
 conditions.
\layout Standard

HINT: if you want to exclude everything except a specific configuration,
 you can write a rule like 
\family typewriter 
context pconf: !.*, ulinux
\family default 
 which first excludes all existing pconfs, and then selectively adds exactly
 
\family typewriter 
pconf.ulinux
\family default 
 to the combinations which should be built.
\layout Standard

IMPORTANT: when you specifiy contradictory rules (e.g.
 in 
\family typewriter 
target.A
\family default 
 you exclude 
\family typewriter 
B.ath
\family default 
 while and in 
\family typewriter 
B.ath
\family default 
 you include 
\family typewriter 
target.A
\family default 
), the following precedence rules apply: 
\family typewriter 
pconf.*
\family default 
 < 
\family typewriter 
cconf.*
\family default 
 < 
\family typewriter 
target.*
\family default 
 < 
\family typewriter 
*.ath
\family default 
.
 A regex rule in a higher file will always supersede a rule from a lower
 one.
\layout Subsubsection

Generic Shell Conditions
\layout Standard

Some build problems depend on the machine where the build process is executed.
 For example, foreign architectures cannot be built on many architectures
 (exept you have cross-compilers etc).
 In order to limit the build configuration to the current capabilities of
 your system, any context rule can be made 
\emph on 
conditional
\emph default 
 in the following way:
\layout Standard
\noindent 

\family typewriter 
# context "
\family default 
\emph on 
shell-commands
\family typewriter 
\emph default 
" pconf:
\family default 
 
\emph on 
regex-list
\layout Standard

As you will expect, it calls the shell commands via Perl 
\family typewriter 
system()
\family default 
 and checks whether the return code is 0 (success).
 Upon failure, the context rule is not interpreted as a whole.
\layout Standard

As an example, you may check for a particular processor type by 
\family typewriter 
#context "test `uname -p` != i386" pconf: !.*i386.*
\layout Subsection

Sub-Configurations
\layout Standard

Often different 
\family typewriter 
cconf.*
\family default 
 versions share a lot of common macro definitions or make rules.
 In order to remove redundancy, you are advised to put common things in
 include files.
 Whenever a 
\family typewriter 
include
\family default 
 statement is found in one of the configuation files on a separate line,
 the inclusion is performed by 
\family typewriter 
makegen.pl
\family default 
 such that the pseudo-macros valid at the calling file are also substituted
 in the included file.
 
\layout Standard

This way, you can not only save redundancy, but also produce sub-configurations
 in a 
\emph on 
systematic
\emph default 
 way if you obey the following conventions:
\layout Standard


\family typewriter 
cconf-include.
\emph on 
commonname
\family default 
\emph default 
 should denote a common include file for 
\family typewriter 
cconf.
\emph on 
commonname
\emph default 
-subversion1
\family default 
 and 
\family typewriter 
cconf.
\emph on 
commonname
\emph default 
-subversion2
\family default 
 and so on.
 
\layout Standard

This means, you should produce subversions of configurations by means of
 hierarchical file names, where each hierarchy level is separated by dashes
 in the name.
 For example, if you want to discriminate different machine architectures
 for a common runtime environment type, you should create names like 
\family typewriter 
cconf.klinux-i386
\family default 
 and 
\family typewriter 
cconf.klinux-x86_64
\family default 
 with a common name part 
\family typewriter 
klinux
\family default 
 and a common include file 
\family typewriter 
cconf-include.klinux
\family default 
.
\layout Standard

This schema should be analogously extended to multiple hierarchy levels,
 e.g.
 when sub-versioning the 
\family typewriter 
i386
\family default 
 architecture into 
\family typewriter 
i386-pentium
\family default 
 and 
\family typewriter 
i386-athlon
\family default 
 or the like.
 This way, you can create arbitrarily fine-grained hierarchical subversions
 of configurations (even with different numbers of hierarchy levels at different
 parts of the tree) without introducing redundancy, just by putting common
 parts into 
\family typewriter 
cconf-include.
\family default 
\emph on 
shorter-version-name
\emph default 
.
\layout Standard

In case you need a stronger binding between different parts of a name, you
 can use the dot instead of a dash for separating a hierarchical group as
 a whole from another group as a whole.
 Examples would be version names like 
\family typewriter 
klinux-i386-athlon.debug
\family default 
 or even 
\family typewriter 
klinux-i386-athlon.debug-gdb3
\family default 
 when different debuggers come into play (or the like).
 In such a case, please consider the use of multiple 
\family typewriter 
include
\family default 
 statements for independent inclusion of independent things, in order to
 keep things as orthogonal as possible.
\layout Standard

For 
\family typewriter 
pconf
\family default 
s, 
\family typewriter 
target
\family default 
s and 
\family typewriter 
buildrules
\family default 
 sections of 
\family typewriter 
*.ath
\family default 
 files you should use the analogous conventions 
\family typewriter 
pconf-include.
\emph on 
commonname
\family default 
\emph default 
, 
\family typewriter 
target-include.
\emph on 
commonname
\family default 
\emph default 
 and 
\family typewriter 
ath-include-
\emph on 
brickname
\emph default 
-
\emph on 
kind
\emph default 
.
\emph on 
commonname
\family default 
\emph default 
 where 
\family typewriter 
\emph on 
commonname
\family default 
\emph default 
 may itself be hierarchically structured.
\layout Section

Internals
\layout Standard

The file 
\family typewriter 
defs.make
\family default 
 is created by a Perl script 
\family typewriter 
makegen.pl
\family default 
, which is automatically invoked by the main 
\family typewriter 
Makefile
\family default 
 whenever one of the 
\family typewriter 
pconf.*
\family default 
, 
\family typewriter 
cconf.*,
\family default 
 
\family typewriter 
target.*
\family default 
 or 
\family typewriter 
*.ath
\family default 
 is touched.
 Thus you should not usually have to bother with the internals.
\layout Section

TODO
\layout Standard

A lot...
\layout Standard

Probably the 
\family typewriter 
*.ath
\family default 
 files should be organized in a hierarchy of subdirectories, by using the
 directory names as parts of the brick names (similar to Java libraries).
 Otherwise the management of hundrets or thousands of brick types could
 become a mess.
 Ideas for good systematics are sought.
\the_end
