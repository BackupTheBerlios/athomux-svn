  Author: Thomas Schoebel-Theuer
  Copyright: University of Stuttgart
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !klinux

brick #test_linux
purpose Some basic testing of filesystem operations
desc
  Internal idiotic testbed for the first steps in the
  infancy of Athomux.
enddesc

static_data {
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <time.h>
}

data {
  int unix_file;
}

init {
  @#.unix_file = open(@param, O_RDONLY, S_IRUSR|S_IWUSR);
  if(@#.unix_file < 0) {
    //@.abort("file '%s' open error: %s\n", @param, strerror(errno));
    exit(-1);
  }
}

input :<in

output :>out

operation $output_init
{
  if(@destr) {
    if(@#.unix_file) {
      close(@#.unix_file);
    }
  }
  if(!@constr) {
    return;
  }
  int repeat = 0;
  int compare = 0;
  addr_t log_addr = 0;
  int i;
  char buf[DEFAULT_TRANSFER];
  lseek(@#.unix_file, 0, SEEK_SET);
  for(;;) {
    void * ptr;
    int count;
    paddr_t phys_addr;
    plen_t phys_len;
    success_t success;
    count = read(@#.unix_file, buf, DEFAULT_TRANSFER);
    if(count <= 0) {
      break;
    }
    @=call :<in$createget (log_addr, DEFAULT_TRANSFER, FALSE) => (success, phys_addr, phys_len);
    if(!success) {
      @.abort("createget failed\n");
    }
    ptr = MAKE_PTR(phys_addr);
    memcpy(ptr, buf, DEFAULT_TRANSFER);
    @=call :<in$put (log_addr, DEFAULT_TRANSFER, prio_background) => (success);
    if(!success) {
      @.abort("putwait failed\n");
    }
    log_addr += DEFAULT_TRANSFER;
    repeat++;
    if(count < DEFAULT_TRANSFER) {
      break;
    }
  }
  printf("wrote %d blocks\n", repeat);

#if 0
  { success_t success;
    @=call :<in$move (0, DEFAULT_TRANSFER*10, DEFAULT_TRANSFER*200) => (success);
    @.check(!success, "first move failed");
    @=call :<in$move (DEFAULT_TRANSFER*200, DEFAULT_TRANSFER*10, -DEFAULT_TRANSFER*200) => (success);
    @.check(!success, "second move failed");
  }
#endif

  lseek(@#.unix_file, 0, SEEK_SET);
  log_addr = 0;
  for(i = 0; i < repeat; i++) {
    void * ptr;
    int count;
    paddr_t phys_addr;
    plen_t phys_len;
    success_t success;
    count = read(@#.unix_file, buf, DEFAULT_TRANSFER);
    if(count <= 0) {
      break;
    }
    @=call :<in$gettranswait (log_addr, DEFAULT_TRANSFER, FALSE) => (success, phys_addr, phys_len);
    if(!success) {
      @.abort("gettranswait failed\n");
    }
    ptr = MAKE_PTR(phys_addr);
    if(memcmp(ptr, buf, DEFAULT_TRANSFER)) {
      printf("**** difference in block %d *****\n", i);
    } else {
      compare++;
    }
    @=call :<in$put (log_addr, DEFAULT_TRANSFER, prio_none) => (success);
    if(!success) {
      @.abort("put failed\n");
    }
    log_addr += DEFAULT_TRANSFER;
    repeat++;
    if(count < DEFAULT_TRANSFER) {
      break;
    }
  }
  printf("correct blocks: %d\n", compare);

  if(atoi(@param)) {
    struct timespec t0, t1;
    printf("------------------------------------\n");
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t0);
    for(i = 0; i < 1000000; i++) {
      paddr_t phys_addr;
      plen_t phys_len;
      success_t success;
      @=call :<in$gettranswait (0, DEFAULT_TRANSFER, FALSE) => (success, phys_addr, phys_len);
      @=call :<in$put (0, DEFAULT_TRANSFER, prio_none) => (success);
    }
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t1);
    printf("gettranswait time=%11lld\n", ((long long)t1.tv_sec-(long long)t0.tv_sec)*1000LL + ((long long)t1.tv_nsec-(long long)t0.tv_nsec)/1000000LL);
    printf("------------------------------------\n");
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t0);
    for(i = 0; i < 1000000; i++) {
      paddr_t phys_addr;
      plen_t phys_len;
      success_t success;
      @=call :<in$get (0, DEFAULT_TRANSFER, FALSE) => (success, phys_addr, phys_len);
      @=call :<in$put (0, DEFAULT_TRANSFER, prio_none) => (success);
    }
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t1);
    printf("get   time=%11lld\n", ((long long)t1.tv_sec-(long long)t0.tv_sec)*1000LL + ((long long)t1.tv_nsec-(long long)t0.tv_nsec)/1000000LL);
    printf("------------------------------------\n");
  }
  @success = TRUE;
}

operation $move
{
  success_t success;
#if 0
  @=call :<in$move (DEFAULT_TRANSFER*8, DEFAULT_TRANSFER*10, -DEFAULT_TRANSFER*8) => (success);
#else
  @=call :<in$move (0, DEFAULT_TRANSFER*10, DEFAULT_TRANSFER*300) => (success);
#endif
  @.check(!success, "move failed");
}
