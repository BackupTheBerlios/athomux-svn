  Author: Jens-Christian Korth
  Copyright: Jens-Christian Korth
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: klinux

brick #device_block_klinux_simple
purpose Wrapper for generic linux 2.6 block devices
desc
  This brick implements a kernelspace wrapper for block devices.
  It uses the new Block I/O (bio) interface of the 2.6 kernel.

  Restrictions:
  The current implementation allows only one active
  transfer request and expects wait to be called afterwards.
enddesc
//attr transfer_size=0

static_header {
#include <linux/bio.h>
#include <linux/blkdev.h>
#include <asm/semaphore.h>
}

static_data {
#include <asm/div64.h>
#include <asm/page.h>

static int device_block_klinux_simple_endio(struct bio *bio, unsigned int bytes_done, int err)
{
  const struct output *on = bio->bi_private;

  if (bio->bi_size)
    return 1;

  // up(&@#sem);
  up(&BASE(on, struct brick_device_block_klinux_simple, _conn_out)->sem);

  /*
  if(!test_bit(BIO_UPTODATE, &bio->bi_flags)) {
    // page error
  }
  */

  bio_put(bio);
  return 0;
}
}

data {
  struct block_device *bdev;
  struct semaphore sem;
}

output :>out


operation $output_init
{
  if(@destr) {
    if(!IS_ERR(@#bdev)) {
      close_bdev_excl(@#bdev);
    }
  }
  if(@constr) {
    sema_init(&@#sem, 0);
    @#bdev = open_bdev_excl(@param, 0, (void *)on); // (@param, MS_RDONLY, (void *)on)
    @.check(IS_ERR(@#bdev), "open_bdev_excl failed");
  }
  @success = TRUE;
}

operation $transfer
{
  struct bio *bio;
  @phys_len = 0;
  
  if(IS_ERR(@#bdev) || (@#bdev == 0)) {
    @.err("$transfer called for invalid block device!");
  }

  switch(@direction) {
    case direct_read:
    case direct_write:
      bio = bio_alloc(GFP_KERNEL, 1);
      if (bio) {
#if 1
	uns8 sector = @log_addr;
	do_div(sector, bdev_hardsect_size(@#bdev));
	bio->bi_sector = sector;
#else
	bio->bi_sector = @log_addr / bdev_hardsect_size(@#bdev);
#endif
	bio->bi_bdev = @#bdev;
	bio->bi_io_vec[0].bv_page = virt_to_page(MAKE_PTR(@phys_addr));
	bio->bi_io_vec[0].bv_len = @log_len;
	bio->bi_io_vec[0].bv_offset = @phys_addr & (PAGE_SIZE-1);
	bio->bi_vcnt = 1;
	bio->bi_idx = 0;
	bio->bi_size = @log_len;
	bio->bi_end_io = device_block_klinux_simple_endio;
	bio->bi_private = (void *)on;
	if(@direction == direct_write)
	  submit_bio(WRITE, bio);
	else
	  submit_bio(READ, bio);

	@success = TRUE;
	@phys_len = @log_len;
      }
    case direct_stop:
      @success = TRUE;
      break;
      //    case direct_write:
    default:
      // @success = FALSE;
      break;
  }
}


operation $wait
{
  down_interruptible(&@#sem);
  @success = TRUE;
}
