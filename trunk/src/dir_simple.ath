  Author: Thomas Schoebel-Theuer
  Copyright: University of Stuttgart
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

brick #dir_simple
purpose Manage a filesystem directory instance
desc
  Trivial bare-bone implementation (new from scratch using the PC).
  Use a fixed table at the beginning of the input nest to keep
  the filenames, offsets and lengths.
  Currently names are limited by NAME_SIZE.
  The data area is kept in the same order as the entries in the
  table. When space requirements change at some output, $move
  is used for reorganization.
enddesc

static_header {
// these constants influence the internal data layout
@.define DATA_SECTIONS (2)
@.define ENTRY_SIZE (128)
@.define ATTR_SIZE (32)
@.define DIR_SECTION (DATA_SECTIONS-1)
@.define _DIR_MAX (500)
}

static_data {
@.define TOTAL_SECTIONS (DATA_SECTIONS + 1)
@.macro STAT_SECTION {@.compute{TOTAL_SECTIONS - 1}}
@.define NAME_SIZE (ENTRY_SIZE - sizeof(struct offsets) * DATA_SECTIONS - ATTR_SIZE)
@.define roundup(nr, base) (((nr-1) / (base) + 1) * (base))
@.define DIR_MAX (roundup(_DIR_MAX, DEFAULT_TRANSFER / ENTRY_SIZE))

// tuning parameters
@.define POSTGAP(sect) (((DIR_SECTION - sect) * 3 + 1) * DEFAULT_TRANSFER)
// TODO: better preallocation strategies _should_ improve performance _drastically_!

struct section_offsets {
  addr_t start;
  addr_t end;  
};

struct dir_control_block {
  addr_t magic;
  index_t version;
  index_t entry_count;
  index_t entry_max;
  struct section_offsets desc_off[DATA_SECTIONS];
};

struct offsets {
  addr_t off_start;
  len_t off_len;
  len_t off_border;
};

struct entry {
  struct offsets off[DATA_SECTIONS];
  char attr_info[ATTR_SIZE];
  char name[NAME_SIZE];
};

struct entry_desc {
  index_t desc_format;
  index_t desc_unused;
  len_t   desc_len;
  index_t desc_attrlen;
  index_t desc_next;
};

}

input :<in(:DATA_SECTIONS:)

  use PC dirtable (:DIR_SECTION:) [4] aligned(DEFAULT_TRANSFER) round;

output :>dir

@.define check_magic(control)
{
  @.fatal(control->magic != MAGIC_dir_simple, "bad magic %llx", control->magic);
}

@.func new_dir(index_t count, bool clear)
{
  index_t max = roundup(count, DEFAULT_TRANSFER / ENTRY_SIZE);
  len_t len = max * ENTRY_SIZE;
  struct dir_control_block * control = PC_GET(dirtable, 0, ENTRY_SIZE);
  if(!clear || control) { // must / should already exist
    @.check(!control, "directory '%s' does not exist", @param);
    check_magic(control);
    @success = TRUE;
    return;
  }
  trace("creating new dir controlblock\n");
  @=call :<in(:DIR_SECTION:)$create (0, len, TRUE) => (@success);
  @.check(!@success, "could not init directory");
  control = PC_GET_DIRTY(dirtable, 0, ENTRY_SIZE);
  @.check(control->magic, "new directroy block is not empty");
  control->magic = MAGIC_dir_simple;
  control->version = 1;
  control->entry_count = 2;
  control->entry_max = max;
  control->desc_off[DIR_SECTION].start = len;
  control->desc_off[DIR_SECTION].end = len;
  PC_FLUSH(dirtable);
  @success = TRUE;
}

operation $output_init
{
  if(@destr) {
#ifdef DEBUG
    struct dir_control_block * control = PC_GET(dirtable, 0, ENTRY_SIZE);
    check_magic(control);
    PC_FLUSH(dirtable);
    trace("successful destruction\n");
#endif
    PC_FLUSH(dirtable);
    @success = TRUE;
  }
  if(@constr) {
    @success = FALSE;
    new_dir(DIR_MAX, @clear);
  }
}

@.func transfer_statinfo (index_t index)
{
  struct entry * entry = PC_GET(dirtable, index * ENTRY_SIZE, ENTRY_SIZE);
  struct entry_desc * desc = MAKE_PTR(@phys_addr);
  char * phys = (void*)desc;
  //FIXME: check bounds against @log_len
  @phys_len = sizeof(struct entry_desc);
  if(@direction == direct_write) {
    @.check(desc->desc_attrlen < sizeof(struct entry_desc) + ATTR_SIZE, "cannot handle attr size %d", desc->desc_attrlen);
    PC_DIRTY(dirtable, index * ENTRY_SIZE);
    memcpy(entry->attr_info, phys+@phys_len, ATTR_SIZE);
    @phys_len += ATTR_SIZE;
  } else {
    desc->desc_format = 0;
    desc->desc_attrlen = ATTR_SIZE;
    desc->desc_len = entry->off[@sect_code].off_len;
    memcpy(phys+@phys_len, entry->attr_info, ATTR_SIZE);
    @phys_len += ATTR_SIZE;
    strcpy(phys+@phys_len, entry->name);
    @phys_len += roundup(strlen(entry->name) + 1, sizeof(len_t));
    memset(phys+@phys_len, 0, sizeof(struct entry_desc));
    @phys_len += sizeof(struct entry_desc);
  }
  @success = TRUE;
}

operation $transfer
{
  @.check(@log_len != DEFAULT_TRANSFER, "access to multiple dirinfo blocks NYI");
  struct dir_control_block * control = PC_GET(dirtable, 0, ENTRY_SIZE);
  index_t index = (@log_addr / DEFAULT_TRANSFER) + 1;
  if(index >= control->entry_count) {
    return;
  }
  transfer_statinfo(index);
}

operation $wait
{
  @success = TRUE;
}

output :>out[](:TOTAL_SECTIONS:)
data {
  index_t entry_index;
}

section(:0..DATA_SECTIONS-1:)

operation $output_init
{
  if(@destr) {
    @>entry_index = 0;
#ifdef DEBUG
    struct dir_control_block * control = PC_GET(dirtable, 0, ENTRY_SIZE);
    check_magic(control);
    PC_FLUSH(dirtable);
#endif
  }
  if(@constr) {
    trace("instantiating dir output '%s'\n", @param);
    index_t i;
    index_t empty = 0;
    struct dir_control_block * control = PC_GET(dirtable, 0, ENTRY_SIZE);
    check_magic(control);
    for(i = 1; i < control->entry_count; i++) {
      struct entry * entry = PC_GET(dirtable, i * ENTRY_SIZE, ENTRY_SIZE);
      if(!entry->name[0]) {
	if(!empty) empty = i;
	continue;
      }
      // already exists?
      if(!strcmp(entry->name, @param)) {
	trace("found existing entry '%s'\n", entry->name);
	@>entry_index = i;
	@success = TRUE;
	return;
      }
    }
    if(!@clear) {
      return;
    }
    // Well, it does not exist. Thus we create it...
    trace("create new entry '%s'\n", @param);
    @.check(!empty, "directory overflow while trying to create '%s'", @param);
    PC_DIRTY(dirtable, 0);
    if(empty+1 >= control->entry_count && control->entry_count < control->entry_max) {
      control->entry_count++;
    }
    struct entry * entry = PC_GET_DIRTY(dirtable, empty * ENTRY_SIZE, ENTRY_SIZE);
    for(i = 0; i < DATA_SECTIONS; i++) {
      entry->off[i].off_start = control->desc_off[i].end;
      entry->off[i].off_len = 0;
      entry->off[i].off_border = 0;
    }
    strncpy(entry->name, @param, NAME_SIZE-1);
    @>entry_index = empty;
  }
  @success = TRUE;
}

@.define get_offset(src_addr, src_len)
({
#ifdef DEBUG
  struct dir_control_block * control = PC_GET(dirtable, 0, ENTRY_SIZE);
  check_magic(control);
#endif
  struct entry * entry = PC_GET(dirtable, @>entry_index * ENTRY_SIZE, ENTRY_SIZE);
  @.check(src_addr + src_len > entry->off[@sect_code].off_len, "bad region access: %llx > %llx (border=%llx)", src_addr + src_len, entry->off[@sect_code].off_len, entry->off[@sect_code].off_border);
  entry->off[@sect_code].off_start;
})

operation $op
{
#if 0
  static int xxx = 0;
  if(++xxx % 64 == 0) PC_FLUSH(dirtable);
#endif
#ifdef DEBUG
  @.check(!@>entry_index, "trying to operate on an uninitialized output");
#endif
  addr_t offset = get_offset(@log_addr, @log_len);
  trace("log_addr=%llx, adding offset=%lld, new log_addr=%llx\n", @log_addr, offset, @log_addr+offset);
  @log_addr += offset;
  @try_addr += offset;
  @=call :<in$op @args;
  @log_addr -= offset;
  @try_addr -= offset;
}

@.func correct_infos(struct dir_control_block * control, struct entry * entry, len_t start, offs_t delta)
{
  control->desc_off[@sect_code].end += delta;
  entry->off[@sect_code].off_len += delta;
  entry->off[@sect_code].off_border += delta;
  index_t i;
  for(i = 1; i < control->entry_count; i++) {
    if(i == @>entry_index) {
      continue;
    }
    struct entry * entry = PC_GET_DIRTY(dirtable, i * ENTRY_SIZE, ENTRY_SIZE);
    if(entry->off[@sect_code].off_start >= start) {
      entry->off[@sect_code].off_start += delta;
    }
  }
}

@.func change_size(len_t new_len, len_t new_border, len_t postgap)
{
  @.check(new_len > new_border, "internal inconsistency");
  struct entry * entry = PC_GET_DIRTY(dirtable, @>entry_index * ENTRY_SIZE, ENTRY_SIZE);
  /* Currently the postgap is only enlarged, never shrunk.
   * TODO: implement shrinking, but beware of cyclic pingpong effects!
   * Only shrink if some threshold is exceeded or if the new length is 0.
   */
  offs_t delta = new_border - entry->off[@sect_code].off_border;
  if(delta > 0) {
    delta += postgap;
    trace("delta=%llx\n", delta);
    struct dir_control_block * control = PC_GET_DIRTY(dirtable, 0, ENTRY_SIZE);
    // these values are respective to the :<in nest
    len_t start = entry->off[@sect_code].off_start + entry->off[@sect_code].off_border;
    len_t end = control->desc_off[@sect_code].end;
    success_t success;
    if(end > start) { // there is some data to shift away
      @=call :<in$move (start, end-start, delta) => (success, delta);
      @.check(!success, "creating space failed");
      correct_infos(control, entry, start, delta);
    } else { // tell the existence of a longer area by $create with length 0
      start += delta;
      @=call :<in$create (start, 0) => (success);
      @.check (!success, "creating empty region failed");
      control->desc_off[@sect_code].end = start;
      entry->off[@sect_code].off_border = start - entry->off[@sect_code].off_start;
    }
  }
  @.check(new_len > entry->off[@sect_code].off_border, "inconsistent extension: %llx > %llx", new_len, entry->off[@sect_code].off_border);
  @success = TRUE;
  if(new_len > entry->off[@sect_code].off_len) {
    entry->off[@sect_code].off_len = new_len;
  }
}

operation $create,$createget
{
  trace("address=%lld len=%llx\n", @log_addr, @log_len);
  struct entry * entry = PC_GET(dirtable, @>entry_index * ENTRY_SIZE, ENTRY_SIZE);
  len_t border = @log_addr + @log_len;
  if(border > entry->off[@sect_code].off_len) {
    change_size(border, border, POSTGAP(@sect_code));
    @.check(!@success, "could not extend region");
  }
  if(!@log_len) { // avoid exponentional explosion in recursive calls
    @success = TRUE;
    return;
  }
  @.fatal(@log_addr + @log_len > entry->off[@sect_code].off_start + entry->off[@sect_code].off_len, "internal extension inconsistency");
  len_t offset = entry->off[@sect_code].off_start;
  @log_addr += offset;
  @=call :<in$op @args;
}

operation $move
{
  trace("address=%lld len=%llx offset=%llx offset_max=%llx\n", @log_addr, @log_len, @offset, @offset_max);
  @.check(@offset_max < @offset, "bad offset_max parameter %llx < %llx", @offset_max, @offset);
  @.check(-@offset > (offs_t)@log_addr, "trying to move to negative addresses,  %llx > %llx", -@offset, @log_addr);
  struct entry * entry = PC_GET(dirtable, @>entry_index * ENTRY_SIZE, ENTRY_SIZE);
  len_t end = @log_addr + @log_len;
  len_t border = end;
  if(@offset_max > 0) {
    border += @offset_max;
  }
  if(border <= entry->off[@sect_code].off_border) {
    // well, this move need not affect other neighbour nests
    len_t offset = entry->off[@sect_code].off_start;
    @log_addr += offset;
    @=call :<in$move @args;
    len_t new_len = end + @offset;
    if(@success && new_len > entry->off[@sect_code].off_len) {
      PC_DIRTY(dirtable, @>entry_index * ENTRY_SIZE);
      entry->off[@sect_code].off_len = new_len;
    }
  } else {
    // we have to shift away the other neighbour nests
    struct dir_control_block * control = PC_GET_DIRTY(dirtable, 0, ENTRY_SIZE);
    len_t old_len = @log_len;
    addr_t base_addr = @log_addr + entry->off[@sect_code].off_start;
    @log_addr = base_addr;
    addr_t base_end = control->desc_off[@sect_code].end;
    @log_len = base_end - @log_addr;
    @=call :<in$move @args;
    @log_len = old_len;
    if(@success) {
      PC_DIRTY(dirtable, @>entry_index * ENTRY_SIZE);
      correct_infos(control, entry, base_addr, @offset);
    }
  }
}

section (:STAT_SECTION:)

operation $transfer
{
  transfer_statinfo(@>entry_index);
}


operation $wait
{
  @success = TRUE;
}

// TODO: redirect the other ops of STAT_SECTION
