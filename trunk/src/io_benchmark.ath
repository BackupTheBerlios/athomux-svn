  Author: Jens-Christian Korth
  Copyright: Jens-Christian Korth
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

brick #io_benchmark
purpose IO Benchmark Brick
desc
  Do write operations
enddesc

static_data {
 #include "randomdata.c"
 #include <unistd.h>
 #define MY_TRANSFER      DEFAULT_TRANSFER
 #define MY_TRANSFER_MASK (MY_TRANSFER - 1)
 #define TRANSFERS        100000 // 1GB entspricht 262144
 #define RANDOM_RANGE     (1024*1024*1024) // 1GB
}

data {
  addr_t transfers_per_second;
  addr_t total_bytes_done;
  volatile addr_t bytes_done;
  volatile addr_t next_unlock;
  uns4 randompos;
}


instance #lock_ulinux as lock;
instance #thread_ulinux as thread;
wire ##thread:<exec as :>dummy;

local output :>dummy
data {
  volatile bool is_running;
}

operation $output_init
{
  @success = TRUE;
  if(@destr) {
    @:>.is_running = FALSE;
    @=call ##lock:>lock$lock [1] (-1, 1) => (); // wait on thread
  }
  if(@constr) {
    @:>.is_running = TRUE;
    sscanf(@param, "%Lu", &@#.transfers_per_second);
    @.fatal(!@#.transfers_per_second, "please specify the number of transfers per second in the p""aram");
    sleep(1);
    while(@:>.is_running) {
      @=call ##lock:>lock$unlock [0] (@#.next_unlock, @#.transfers_per_second) => ();
      sleep(1);
      addr_t bytes_done   = @#.bytes_done;
      @#.bytes_done        = 0;
      @#.total_bytes_done += bytes_done;
      printf("%llu KB/s\n", bytes_done >> 10); // div by 1024
    }
    @=call ##lock:>lock$unlock [0] (0, -1) => ();
  }
}


input :<device

output :>out

@.func do_benchmark (bool randomorder)
{
  char buf [MY_TRANSFER];

  addr_t position = 0;
  success_t mysuccess;
  int i;

  for(i=0; i<TRANSFERS; i++) {
    if(randomorder) {
      position = ((position + randomdata[@#.randompos++]) % RANDOM_RANGE) & ~MY_TRANSFER_MASK;
    }
    @=call ##lock:>lock$lock [1] (@#.next_unlock, 1) => (mysuccess);
    @#.next_unlock++;
    @.check(!mysuccess, "obtaining lock failed");
    position     += MY_TRANSFER;
    @#.bytes_done += MY_TRANSFER;
    @=call :<device$transfer (position, sizeof(buf), (paddr_t)buf, direct_write) => (mysuccess);
    @.check(!mysuccess, "write failed");
  }

  @=call :<device$wait (0, -1, prio_background) => (mysuccess); // sync
  @.check(!mysuccess, "wait failed");
}

operation $output_init
{
  if(!@constr) {
    @=call :<device$wait (0, -1, prio_background) => (); // sync
    printf("Unloading "BASEFILE"\n");
  } else {
    printf("Starting "BASEFILE"\n");
  }
  @success = TRUE;
  if(@constr) {
    if(@success) {
      printf("init ok\n");
      @=call ##lock:>lock$lock [0] (0, -1) => (@success);
      @.check(!@success, "locking lock failed");

      @=call ##thread:>cpu$output_init (FALSE, TRUE) => (@success);
      @.check(!@success, "initializing thread failed");

      do_benchmark(TRUE);

      @=call :>dummy$output_init (TRUE, FALSE) => (); // terminate thread
    } else {
      printf("init failed\n");
    }
  }
}
