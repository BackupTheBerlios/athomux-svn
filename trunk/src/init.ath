  Author: Jens-Christian Korth / Hardy Kahl
  Copyright: Jens-Christian Korth / Hardy Kahl
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

brick #init
purpose ATHOMUX Loader (common initialization)
static_header {
extern bool athomux_init(const struct output * on, const bool constr, char *initbrick_name, char *initbrick_param);

#ifdef ATHOMUX_BOOTSTRAP
struct brick_init initbrick;
#ifdef TRACE
int call_level = 0;
char blanks[32];
#endif

#define ATHOMUX_INIT_INIT() memset(&initbrick, 0, sizeof(struct brick_init)); init_init(&initbrick, NULL, 0)
#define ATHOMUX_INIT(ai_brick, ai_param) athomux_init(&initbrick._conn_init._output_, TRUE, ai_brick, ai_param)
#define ATHOMUX_CLEANUP(ai_brick, ai_param) athomux_init(&initbrick._conn_init._output_, FALSE, ai_brick, ai_param)
#endif
}

static_data {
#include <stdio.h>
#include <stdlib.h>
#include "control_simple.h"


bool athomux_init(const struct output * on, const bool constr, char *initbrick_name, char *initbrick_param)
{
  struct args args = { .op_code = opcode_output_init, .destr = !constr, .constr = constr, .success = FALSE, .phys_addr = MAKE_PADDR(initbrick_name) };
  init_init_0_output_init((const union connector *)on, &args, initbrick_param);
  return args.success;
}

}

data {
  addr_t pbrick;
  bool boot;
  bool has_strat;
}

init {
  if(!@#.boot) { // never boot myself twice
    @#.boot = TRUE;
    init_static_control_simple();
    _brick->_conn_control._input_.connect = root_strategy;
    // is the following line required?
    //_brick->_conn_control._input_.rev_next = root_strategy->rev_chain;
  }
}


local input :<control

local output :>init


operation $output_init
{
  addr_t control_addr = DEFAULT_TRANSFER;
  struct conn_info conn_contr = { .conn_addr = control_addr, .conn_index = 0, .conn_name = "control" };
  
  if (@destr) {
    // deinstantiate brick

    struct conn_info conn_progr = { .conn_addr = @#.pbrick, .conn_index = 0, .conn_name = "program" };
    struct conn_info conn_strat = { .conn_addr = @#.pbrick, .conn_index = 0, .conn_name = "strat" };

    // terminate program
    @=call :<control$deinstconn (&conn_progr):"" => (@success);
    @.fatal(@success!=TRUE, "deinstconn failed");

    if(@#.has_strat) {
      // disconnect from control
      @=call :<control$disconnect (&conn_strat):"" => (@success);
      @.fatal(@success!=TRUE, "disconnect failed");
    }

    // deinstantiate program brick
    @=call :<control$deinstbrick (@#.pbrick):"" => (@success);
    @.fatal(@success!=TRUE, "deinstbrick failed");

    // free memory
    @=call :<control$delete (@#.pbrick, DEFAULT_TRANSFER):"" => (@success);
    @.fatal(@success!=TRUE, "delete failed");
  }
  if (@constr) {
    // instantiate brick

    // allocate new memory for program brick
    @=call :<control$gadr (DEFAULT_TRANSFER):"" => (@success, @#.pbrick);
    @.fatal(@success!=TRUE, "gadr failed");

    // instantiate program brick
    @=call :<control$instbrick (@#.pbrick, (char *)MAKE_PTR(@args->phys_addr)):@param => (@success);
    @.fatal(@success!=TRUE, "instbrick failed");

    struct conn_info conn_progr = { .conn_addr = @#.pbrick, .conn_index = 0, .conn_name = "program" };
    struct conn_info conn_strat = { .conn_addr = @#.pbrick, .conn_index = 0, .conn_name = "strat" };

    // connect to control
    @=call :<control$connect (&conn_strat, &conn_contr):"" => (@success);
    @#.has_strat = @success;
    //@ .fatal(@success!=TRUE, "connect failed");
    
    // run the program
    @=call :<control$instconn (&conn_progr):@param => (@success);
    @.fatal(@success!=TRUE, "instconn failed");
  }
}
