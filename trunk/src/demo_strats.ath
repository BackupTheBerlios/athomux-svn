Author: Hardy Kahl
Copyright: Hardy Kahl
License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !klinux
context cconf: !klinux

brick #demo_strats

purpose server part of network transparency demonstration

desc
enddesc

example
endexample




static_data {
  #include "param_scanner.h"
  #include <limits.h>
  #include <errno.h>
}




data {
  addr_t smaddr;
  addr_t gdaddr;
}




@.include "param_scanner.inc"




@.func sh_loop()
{
  success_t succ;
  plen_t plen;
  char buf[DEFAULT_TRANSFER];
  memset(buf, 0, DEFAULT_TRANSFER);

  printf("-> ");
  while (fgets(buf, DEFAULT_TRANSFER-1, stdin)!=NULL) {
    unsigned long int convresult = strtoul(buf, NULL, 0);
    if (convresult!=ULONG_MAX) {
      int i=convresult;

      memset(buf, 0, DEFAULT_TRANSFER);
      @=call :<strat$transwait [@mandate] (DEFAULT_TRANSFER*i,DEFAULT_TRANSFER,MAKE_PADDR(buf),direct_read) => (succ, plen);
      if (succ==TRUE) {
        if (fwrite(buf, plen, 1, stdout) != 1) printf("write error\n");
      }
      else printf("cannot read\n");
    }
    else printf("invalid address multiplikator: %s\n", strerror(errno));

    printf("-> ");
    memset(buf, 0, DEFAULT_TRANSFER);
  }

  @success = TRUE;
}




operation $brick_init
{
  char const *param_orig=@param;
  @param="WA";
  INIT_ALL_INPUTS();
  INIT_ALL_INSTANCES();
  INIT_ALL_OUTPUTS();
  @param=param_orig;

  if (@constr && !@destr) {
    // instantiate brick
    success_t succ;
    char *par = "port=10001 rid=1";
    addr_t controladdr = DEFAULT_TRANSFER;  // FIXME: hardcoded address of control brick
    struct conn_info control_control = { .conn_addr = controladdr, .conn_index = 0, .conn_name = "control" };


    // -----------------------------------------
    // instantiate bricks and inputs and outputs
    // -----------------------------------------

    @=call :<strat$gadr [@mandate] (DEFAULT_TRANSFER) => (succ, @#.smaddr);
    @.check(succ!=TRUE, "gadr failed");
    struct conn_info sm_strat = { .conn_addr = @#.smaddr, .conn_index = 0, .conn_name = "strat" };
    @=call :<strat$instbrick [@mandate] (@#.smaddr, "strategy_stratconnect", FALSE, FALSE) : par => (succ);
    @.check(succ!=TRUE, "instbrick failed");
    @=call :<strat$instconn [@mandate] (&sm_strat) : "" => (succ);
    @.check(succ!=TRUE, "instconn failed");

    @=call :<strat$gadr [@mandate] (DEFAULT_TRANSFER) => (succ, @#.gdaddr);
    @.check(succ!=TRUE, "gadr failed");
    struct conn_info gd_strat = { .conn_addr = @#.gdaddr, .conn_index = 0, .conn_name = "strat" };
    @=call :<strat$instbrick [@mandate] (@#.gdaddr, "strategy_display", FALSE, FALSE) : "fname=graph_strats" => (succ);
    @.check(succ!=TRUE, "instbrick failed");
    @=call :<strat$instconn [@mandate] (&gd_strat) : "" => (succ);
    @.check(succ!=TRUE, "instconn failed");


    // --------------
    // connect bricks
    // --------------

    @=call :<strat$connect [@mandate] (&sm_strat, &control_control) => (succ);
    @.check(succ!=TRUE, "connect failed");
    @=call :<strat$connect [@mandate] (&gd_strat, &control_control) => (succ);
    @.check(succ!=TRUE, "connect failed");


    // ------------
    // start bricks
    // ------------

    @=call :<strat$instbrick [@mandate] (@#.smaddr, "strategy_stratconnect", TRUE, FALSE) : par => (succ);
    @.check(succ!=TRUE, "instbrick failed");
    @=call :<strat$instbrick [@mandate] (@#.gdaddr, "strategy_display", TRUE, FALSE) : "fname=graph_strats" => (succ);
    @.check(succ!=TRUE, "instbrick failed");

    // FIXME: init brick
    struct conn_info sm_init = { .conn_addr = @#.smaddr, .conn_index = 0, .conn_name = "init" };
    @=call :<strat$instconn [@mandate] (&sm_init) : par => (succ);
    @.check(succ!=TRUE, "instconn failed");
    struct conn_info gd_init = { .conn_addr = @#.gdaddr, .conn_index = 0, .conn_name = "init" };
    @=call :<strat$instconn [@mandate] (&gd_init) : "fname=graph_strats" => (succ);
    @.check(succ!=TRUE, "instconn failed");

    sh_loop();
  }
  else {
    // deinstantiate bricks
  }

  @success = TRUE;
}




input :<strat
