Author: Roland Niese
Copyright: Roland Niese
License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: ulinux*
context cconf: ulinux*

brick #device_console_ulinux

purpose Provides a console window for user IO.

desc
	        +---------+        
	        |         +--- read
	buf ----+         |
	        |         +-- write
	        +---------+        

	Each brick instance starts a terminal window and provides two pipes
	to write text (via "write") to or to read text (via "read") from the user.
	NOTE: currently, only physical IO is implemented on these pipes!
	This will change as soon as a fully functional memory device brick (see below)
	is available.
	
	The input "buf" is used by this brick to store its status and as a
	memory source for the outputs (all memory io is redirected to "buf"),
	so a dynamic nest with memory semantics and address allocation capabilities
	is necessary there.
enddesc

// Indices into file descriptor arrays holding the pipes to the child prog.
@.define READ (0)
@.define WRITE (1)
// Currently, the position and size of the read buffer in :<buf are fixed.
@.define READ_BUF_ADDR (0)
@.define READ_BUF_SIZE (DEFAULT_TRANSFER)

static_data {
	#include <sys/types.h>
	#include <sys/stat.h>
	#include <unistd.h>
	#include <signal.h>
	#include <fcntl.h>

	// An executable communicating with the calling brick via stdin/stdout.
	#define MAKE_STRING(VAR) #VAR
	#define MAKE_EXPANDED_STRING(VAR) MAKE_STRING(VAR)
	#define DEFAULT_CHILD_PROGRAM "PCONF/" MAKE_EXPANDED_STRING(CCONF) "/graph_console"
}

data {
	// These variables constitute instance attributes, no 'brick state',
	// as they are never modified after brick initialization and can safely
	// be dumped on brick deinitialization (they don't need to be saved for
	// proper reinitialization).
	pid_t child_pid;
	int to_child[2], from_child[2];
}

instance #lock_native as readlock;

operation $brick_init {
	@success = FALSE;
	if (@destr) {
		INIT_ALL_OUTPUTS ();
		INIT_ONE_INSTANCE (readlock, "");
		if (@#.child_pid > 0) {
			kill(@#.child_pid, SIGTERM);
		}
		close(@#.to_child[READ]);
		close(@#.from_child[WRITE]);
		INIT_ALL_INPUTS ();
	}
	if (@constr) {
		INIT_ALL_INPUTS ();
		INIT_ONE_INSTANCE (readlock, "");
		@#.child_pid = -1;
		@.check (pipe(@#.to_child) < 0 || pipe(@#.from_child) < 0, "Error creating pipes for connection to child program!\n");
		int pid = fork();
		@.check (pid < 0, "Error creating child process!\n");
		if (pid == 0) {
			// Child process:
			// Link the pipes to stdin/stdout, close the pipes' other ends.
			close(@#.to_child[WRITE]);
			close(@#.from_child[READ]);
			if (dup2(@#.to_child[READ], STDIN_FILENO) < 0 || dup2(@#.from_child[WRITE], STDOUT_FILENO) < 0) {
				fputs("Error linking the pipes to child process!\n", stderr);
				exit(1);
			}
			// ...and start the specified child terminal program.
			execl(DEFAULT_CHILD_PROGRAM, DEFAULT_CHILD_PROGRAM, @param, NULL);
			// Signal the parent an error via closure of the connection.
			close(@#.to_child[READ]);
			close(@#.from_child[WRITE]);
			exit(1);
		}
		else {
			char buf[256];
			size_t buf_len;
			// Parent process:
			// Close the pipes' ends that belong to the child.
			@#.child_pid = pid;
			close(@#.to_child[READ]);
			@#.to_child[READ] = -1;
			close(@#.from_child[WRITE]);
			@#.from_child[WRITE] = -1;
			INIT_ALL_OUTPUTS ();
			@success = FALSE;
			buf_len = read(@#.from_child[READ], buf, sizeof buf - 1);
			@.check (buf_len <= 0, "The client program \"" DEFAULT_CHILD_PROGRAM "\" could not be startet! Did you build it? There should be a target for it!");
			buf[buf_len] = '\0';
			trace ("Output from console is \"%s\"\n", buf);
		}
	}
	@success = TRUE;
}

/* Storage for brick status. */
input:<buf

/* Input pipe, from where user input can be read. 
 * Right now, only physical input via $gadrtranswaitdeletepadr is implemented, due to the lack of a fully functional memory device brick that could be used as buffer. */
output :>read

	data {
		// Output state.
		// TODO: store this in :<buf
		addr_t read_buf_addr;
		len_t read_buf_pos;
		len_t read_buf_size;
	}

	operation $output_init {
		if (@constr == FALSE && @destr == TRUE) {
			success_t ok;
			@=outputcall :<buf$delete (@:>.read_buf_addr, @:>.read_buf_size) => (ok);
		}
		else if (@constr == TRUE && @destr == FALSE) {
			success_t ok;
			// read_buf_addr and read_buf_size are constant for now. They may be
			// determined dynamically in the future (e.g., via $brick_init paramstring).
			@:>.read_buf_addr = READ_BUF_ADDR;
			@:>.read_buf_size = READ_BUF_SIZE;
			@=outputcall :<buf$create (@:>.read_buf_addr, @:>.read_buf_size) => (ok);
			@.check (!ok, "Error creating read buffer!");
			@:>.read_buf_pos = @:>.read_buf_size;
		}
		@success = TRUE;
	}

	/* Preparation for any kind of input from this pipe. */
	operation $gadr {
		@.err ("$gadr not implemented yet! Use $gadrtranswaitdeletepadr");
	}
	
	/* Physical pipe input. */
	operation $gadrtranswaitdeletepadr {
		@.check (@phys_len <= 0, "phys_len <=0!");
		success_t ok;
		paddr_t read_buf_paddr;
		plen_t read_buf_plen;
		version_t read_buf_version;
		
		@=outputcall ##readlock:>out$lock ((addr_t)-1, 1) => (ok);
		@.check (!ok, "Could not obtain read lock!");
		// Get pointer to read buffer.
		//@.msg ("INFO: ", "read_buf_addr == 0x%llX, read_buf_size == 0x%llX", @:>.read_buf_addr, @:>.read_buf_size);
		@=outputcall :<buf$get (@:>.read_buf_addr, @:>.read_buf_size) => (ok, read_buf_paddr, read_buf_plen, read_buf_version);
		@.check (!ok || read_buf_plen < (plen_t)@:>.read_buf_size, "Error getting read buffer!");
		// Update read buffer if necessary.
		if (read_buf_version != vers_newest) {
			@=outputcall :<buf$transwait (@:>.read_buf_addr, @:>.read_buf_size, read_buf_paddr, direct_read) => (ok, read_buf_plen);
			@.check (!ok || read_buf_plen < @:>.read_buf_size, "Error updating read buffer!");
		}
		// Copy from read buffer to destination address until LF found or destination full.
		char *const read_buf = MAKE_PTR (read_buf_paddr);
		char *const dest_buf = MAKE_PTR (@phys_addr);
		char *dest_write = dest_buf;
		char *const dest_end = MAKE_PTR (@phys_addr + @phys_len);
		bool hit_lf = FALSE;
		while (!hit_lf && dest_write < dest_end) {
			fflush(stdout);
			// Refill read buffer if empty.
			if (@:>.read_buf_pos == @:>.read_buf_size) {
				@:>.read_buf_size = (len_t)read(@#.from_child[READ], read_buf, @:>.read_buf_size);
				@.check (@:>.read_buf_size <= 0, "Error reading from user!");
				@:>.read_buf_pos = 0;
			}
			char *buf_read = (char *)MAKE_PTR (read_buf_paddr + (plen_t)@:>.read_buf_pos);
			char *const read_buf_end = MAKE_PTR (read_buf_paddr + (plen_t)@:>.read_buf_size);
			while (buf_read < read_buf_end && dest_write < dest_end) {
				*dest_write++ = *buf_read;
				if (*buf_read++ == '\n') {
					hit_lf = TRUE;
					break;
				}
			}
			@:>.read_buf_pos = (len_t)(buf_read - read_buf);
		}
		// Release buffer and set return values.
		@=outputcall :<buf$put (@:>.read_buf_addr, @:>.read_buf_size) => (ok);
		@phys_len = (plen_t)(dest_write - dest_buf);
		@=outputcall ##readlock:>out$unlock ((addr_t)-1, 1) => (ok);
		@.check (!ok, "Could not release read lock!");
		@success = TRUE;
	}
	
	/* Default operation behaviour to be implemented by :<buf. */
	operation $op {
		@=outputcall :<buf$op @args;
	}
	

/* Output pipe. Strings written to it will be displayed to the user.
 * Right now only physical output via $gadrcreatetranswaitpadr is implemented, due to the lack of a fully functional memory device brick that could be used as buffer. */
output:>write

	operation $output_init {
		@success = TRUE;
	}

	/* Finalization of any kind of output to this pipe. */
	operation $padr {
		@.err ("$padr not implemented yet! Use $gadrcreatetranswaitpadr");
	}

	/* Physical pipe output. */
	operation $gadrcreatetranswaitpadr {
		@.check (@phys_len <= 0, "phys_len <= 0");
		@phys_len = write(@#.to_child[WRITE], MAKE_PTR (@phys_addr), @phys_len);
		@success = TRUE;
	}

	/* Default operation behaviour to be implemented by :<buf. */
	operation $op {
		@=outputcall :<buf$op @args;
	}
