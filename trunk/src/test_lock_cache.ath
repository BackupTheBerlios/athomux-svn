Author: Roland Niese
Copyright: Roland Niese
License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !.*, ulinux.*, klinux

brick #test_lock_cache

purpose Verify #lock_cache brick

desc
	Consistency checks on one lock manager together with two caches.
	The lock manager and lock cache should have each already been approved in single tests.
	sub-bricks:
		* memory provider #mem gets multiuser-protected by #monitor
		* a number of #map_selector bricks each pick out a piece from the memory cake for their respective client
		* the #lock_manager takes two selectors, one for its config input, one for the main input
		* the two #lock_cache's main inputs each get connected to the lock manager's output
		* the #lock cache's config inputs each get connected to an own selector
		* the #lock_cache's outputs each get connected to a separate local input (:<user_*)
enddesc

static_data {
	// sprintf for athomux data types
	#include "ath_stdio.h"
	
	// Unfortunately, this is necessary, since generic types cannot be used in functions
	struct lmgr_meta {
		addr_t addr;
		len_t len;
		mand_t mand;
		int4 flags;
	};
}

// Memory
instance #device_mem_nest_ulinux as mem;
instance #heap as heap;
wire :<in as ##mem:>out;
instance #adapt_multi as monitor;
wire :<in as ##heap:>out;
instance #map_select as sel_con;
wire :<in as ##monitor:>out;
instance #map_select as sel_rsc;
wire :<in as ##monitor:>out;
instance #map_select as sel_lm;
wire :<in as ##monitor:>out;
instance #map_select as sel_lc_a;
wire :<in as ##monitor:>out;
instance #map_select as sel_lc_b;
wire :<in as ##monitor:>out;
instance #map_select as sel_bma;
wire :<in as ##monitor:>out;
// Locking
instance #lock_manager as lm;
wire :<tmp as ##sel_lm:>out;
wire :<in as ##sel_rsc:>out;
instance #spy_block as spylmout;
wire :<tmp as ##sel_bma:>out;
wire :<in as ##lm:>out;
instance #lock_cache as lc_a;
wire :<tmp as ##sel_lc_a:>out;
wire :<in as ##spylmout:>out;
wire :>out as :<userA;
instance #lock_cache as lc_b;
wire :<tmp as ##sel_lc_b:>out;
wire :<in as ##spylmout:>out;
wire :>out as :<userB;
// asynchronous locking
instance #thread_ulinux as lc_a_async;
wire :<exec as ##lc_a:>out;
// Logging
instance #device_console_ulinux as con_a;
wire :<buf as ##sel_con:>out;
wire :>read as :<usrinp;
wire :>write as :<log;
instance #format_metanest as fmt_lm;
wire :<meta as ##lm:>out;
wire :<text as ##con_a:>write;
instance #format_metanest as fmt_lc_a;
wire :<meta as ##lc_a:>out;
wire :<text as ##con_a:>write;
instance #format_metanest as fmt_lc_b;
wire :<meta as ##lc_b:>out;
wire :<text as ##con_a:>write;

@.define log (FMTSTR, ...) (athpipeprintf(&@:<log, FALSE, 0, FMTSTR ...))

operation $brick_init {
	if (@destr && !@constr) {
		INIT_ALL_OUTPUTS ();
		INIT_ALL_INSTANCES ();
		INIT_ALL_INPUTS ();
	}
	if (@constr && !@destr) {
		success_t ok;
		INIT_ALL_INPUTS ();
		// local inputs and outputs need extra initialization
		@=inputcall :<userA$input_init (@destr, @constr) => (ok);
		@.check (!ok, "Could not initialize :<userA!");
		@=inputcall :<userB$input_init (@destr, @constr) => (ok);
		@.check (!ok, "Could not initialize :<userB!");
		@=inputcall :<usrinp$input_init (@destr, @constr) => (ok);
		@.check (!ok, "Could not initialize :<usrinp!");
		@=inputcall :<log$input_init (@destr, @constr) => (ok);
		@.check (!ok, "Could not initialize :<log!");
		// memory
		INIT_ONE_INSTANCE (mem, "");
		
		INIT_ONE_INSTANCE (monitor, "");
		INIT_ONE_INSTANCE (heap, "");
		INIT_ONE_INSTANCE (sel_con,  "length=0100000");
		INIT_ONE_INSTANCE (sel_lm,   "length=0100000");
		INIT_ONE_INSTANCE (sel_lc_a, "length=0100000");
		INIT_ONE_INSTANCE (sel_lc_b, "length=0100000");
		INIT_ONE_INSTANCE (sel_bma,  "length=0200000");
		INIT_ONE_INSTANCE (sel_rsc,  "length=1000000");
		// surveillance
		INIT_ONE_INSTANCE (spylmout, "title='Lock Manager:>out' mode=trace");
		// locking
		INIT_ONE_INSTANCE (lm, "");
		INIT_ONE_INSTANCE (lc_a, "");
		INIT_ONE_INSTANCE (lc_b, "");
		// asynchronization
		INIT_ONE_INSTANCE (lc_a_async, "");
		// logging
		@success = FALSE;
		INIT_ONE_INSTANCE (con_a, "Lock Cache Test");
		@.check(!@success, "Could not start console program!");
		INIT_ONE_INSTANCE (fmt_lm, "name=\"lock manager\"");
		INIT_ONE_INSTANCE (fmt_lc_a, "name=\"lock cache A\"");
		INIT_ONE_INSTANCE (fmt_lc_b, "name=\"lock cache B\"");
		INIT_ALL_OUTPUTS ();
	}
	@success = TRUE;
}

local input :<usrinp

local input :<log

local input :<userA

	operation $retract {
		success_t ok;
		log ("[[UserA]] retract [0x%L..0x%L)\n", @try_addr, @try_addr + @try_len);
		@=outputcall $unlock [1001] (@try_addr, @try_len) => (ok);
	}

local input :<userB

	operation $retract {
		success_t ok;
		log ("[[UserB]] retract [0x%L..0x%L)\n", @try_addr, @try_addr + @try_len);
		@=outputcall $unlock [2002] (@try_addr, @try_len) => (ok);
	}

input :<strat

output :>program

	@.func pause () {
		char textbuf[8];
		@=outputcall :<usrinp$gadrtranswaitdeletepadr (MAKE_PADDR (textbuf), (plen_t)sizeof textbuf) => (@success, @phys_len);
	}
	
	@.func lock_and_test (void *output, mand_t mand, addr_t try_start, addr_t start, addr_t end, addr_t try_end, lock_t data, lock_t addr, action_t action, addr_t exp_start, addr_t exp_end) => (success_t ok) {
		struct args argums = {
			success: FALSE,
			mandate: mand,
			log_addr: start,
			log_len: end - start,
			try_addr: try_start,
			try_len: try_end - try_start,
			data_lock: data,
			addr_lock: addr,
			action: action,
			sect_code: 0,
			op_code: opcode_lock,
		};
		ok = FALSE;
		log ("$lock [%m] (?0x%L..!0x%L..0x%L!..0x%L %k%k)\n", mand, try_start, start, end, try_end, data, addr);
		((struct output *)output)->ops[0][opcode_lock] (output, &argums, "");
		if (!argums.success) {
			log ("locking of [0x%L..[0x%L..0x%L]..0x%L] failed!\n", try_start, start, end, try_end);
			return;
		}
		if (argums.try_addr != exp_start || argums.try_addr + argums.try_len != exp_end) {
			log ("locking of [0x%L..[0x%L..0x%L]..0x%L] unexpectedly resulted in lock of [0x%L..0x%L]!\n", try_start, start, end, try_end, argums.try_addr, argums.try_addr + argums.try_len);
			return;
		}
		ok = TRUE;
	}

	// "main ()"
	operation $output_init {
		success_t ok;
		log ("mandates: ##lm==%m ##lc_a==%m ##lc_b==%m ##lm#impl==%m\n", @##lm._mand, @##lc_a._mand, @##lc_b._mand, @##lm#impl._mand);
		@=inputcall ##lm:<wa_out$input_init (FALSE, TRUE) => (ok);
		@=outputcall ##fmt_lm:>trigger$gadr (0) => (ok);
		@=outputcall ##fmt_lc_a:>trigger$gadr (0) => (ok);
		@=outputcall ##fmt_lc_b:>trigger$gadr (0) => (ok);
		log ("-------- TEST 1: retraction --------\n");
		lock_and_test (&@##lc_a:>out, 1001, 0x100, 0x100, 0x200, 0x200, lock_write, lock_write, action_wait, 0x100, 0x200) => (ok);
		if (!ok) return;
		lock_and_test (&@##lc_b:>out, 2002, 0x80, 0x140, 0x1C0, 0x280, lock_write, lock_write, action_wait, 0x140, 0x1C0) => (ok);
		if (!ok) return;
		log ("Press ENTER in the line above to continue...\n");
		pause ();
		@success = FALSE;
		@=outputcall ##fmt_lm:>trigger$gadr (0) => (ok);
		@=outputcall ##fmt_lc_a:>trigger$gadr (0) => (ok);
		@=outputcall ##fmt_lc_b:>trigger$gadr (0) => (ok);		
		log ("-------- TEST 2:  --------\n");
		@=outputcall ##spylmout:>out$output_init (TRUE, TRUE) : "mode=block" => ();
		lock_and_test (&@##lc_a_async:>cpu, 1001, 0xC0, 0xC0, 0x1C0, 0x1C0, lock_write, lock_write, action_wait, 0xC0, 0x1C0) => (ok);
		lock_and_test (&@##lc_b:>out, 2002, 0x100, 0x100, 0x220, 0x220, lock_write, lock_write, action_wait, 0x100, 0x220) => (ok);
		@=outputcall ##fmt_lm:>trigger$gadr (0) => (ok);
		@=outputcall ##fmt_lc_a:>trigger$gadr (0) => (ok);
		@=outputcall ##fmt_lc_b:>trigger$gadr (0) => (ok);
		log ("Press ENTER in the line above to continue...\n");
		@success = FALSE;
		
		@success = TRUE;
	}
