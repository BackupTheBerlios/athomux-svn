  Author: Jens-Christian Korth
  Copyright: Jens-Christian Korth
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: klinux

brick #device_char_klinux
purpose Wrapper for generic linux character devices
desc
  This brick implements a kernelspace wrapper for char devices.
  It uses the traditional synchronous interface.

  Other implementations might use the new asynchronous interface
  of the 2.6 kernel.

  Current positioning strategy for @log_addr
  1. do nothing if we are already at the correct position
  2. use ll_seek if the device supports it
  3. for read operations do positioning by additional read operations
     if the current position is not above the requested one
  4. if we aren`t at the correct position now, then ignore the position
     and do the read- or write operation anyway
enddesc

static_header {
#include <linux/fs.h>
}

static_data {
#include <linux/sched.h>
#include <asm/current.h>
#include <asm/uaccess.h>
}

data {
  struct file *cdev;
}


output :>out


operation $output_init
{
  if(@destr) {
    if(!IS_ERR(@#.cdev)) {
      filp_close(@#.cdev, current->files);
    }
  }
  if(@constr) {
    @#.cdev = filp_open(@param, O_RDWR, S_IRUSR|S_IWUSR);
    @.check(IS_ERR(@#.cdev), "filp_open failed");
  }
  @success = TRUE;
}

operation $trans,$transwait
{
  loff_t (*llseek) (struct file *, loff_t, int);
  ssize_t result;
  mm_segment_t old_fs;

  @.check(!@#.cdev->f_op, "missing device operations");
  @.check(@direction == direct_stop, "trans: direct_stop not implemented");

  if(@log_addr != @#.cdev->f_pos) {
    if((llseek = @#.cdev->f_op->llseek)) { // assignment!
      llseek(@#.cdev, @log_addr, 0);
    }
  }

  // do kernelspace r/w operations
  old_fs = get_fs();
  set_fs(get_ds());

  if(@direction == direct_read) {
    while(@log_addr < @#.cdev->f_pos) {
      size_t readlen = @log_addr - @#.cdev->f_pos;
      if (readlen > @log_len)
	readlen = @log_len;
      ssize_t readone = vfs_read(@#.cdev, MAKE_PTR(@phys_addr), readlen, &@#.cdev->f_pos);
      if (readone <= 0)
	break;
    }
    result = vfs_read(@#.cdev, MAKE_PTR(@phys_addr), @log_len, &@#.cdev->f_pos);
  } else { // @direction == direct_write
    result = vfs_write(@#.cdev, MAKE_PTR(@phys_addr), @log_len, &@#.cdev->f_pos);
  }
  if(result >= 0) {
    @phys_len = result;
    @success = TRUE;
  }
  set_fs(old_fs);
}

operation $wait
{
  @success = TRUE;
}
