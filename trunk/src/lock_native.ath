Author: Roland Niese
Copyright: Roland Niese
License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context: pconf *
context: cconf *

brick #lock_native

purpose Encapsulate low-level lock mechanism

desc
This brick provides simple lock mechanisms for all current runtime environments of Athomux.
It is just for internal use in lock_mand and lock_mutex. Use those bricks to implement true Athomux-like locks.
If a new runtime environment is added to Athomux, please add its lock mechanism here, too. You just need to add your own implementation of the macros below.
The interface spec:
:>out is an array of native locks: each address in the nest is one native lock. Only the address counts, IO makes no sense and is not implemented.
Multiple operation callers can sleep on any such lock.
The lock at address (addr_t)-1 is a global mutex. It must be locked first, before accessing any of the other locks, and unlocked after having finished the operation.
All operations on :>out ignore the "log_len" argument and presume it to be 1.
Use $gadr to allocate an unused lock.
Use $padr to free it again (all threads sleeping on it are woken up, too).
Use $lock to wait for this lock. While waiting, the mutex gets released, and later re-obtained immediately before waking up.
Use $unlock to release all threads waiting for a certain lock without freeing it.
enddesc

static_header {
	@.if ("PCONF" =~ m/^ulinux/) {
		#include <pthread.h>
	}
	@.elseif ("PCONF" =~ m/^klinux/) {
		#include <linux/sched.h>
		#include <linux/wait.h>
		#include <asm/semaphore.h>
	}	
}

data {
	// Maximal number of available locks.
	@.define N_NATIVE_LOCKS (128)
	@.define WORD_SIZE (32)
	
	uns4 free_locks[N_NATIVE_LOCKS / WORD_SIZE];
	
	// --- ulinux* implementation ---
	@.if ("PCONF" =~ m/^ulinux/) {
		pthread_mutex_t mutex_ulinux;
		pthread_cond_t locks_ulinux[N_NATIVE_LOCKS];

		@.define init_native () { @.check(pthread_mutex_init(&@#.mutex_ulinux, NULL) != 0, "Could not initialize lock_list_access mutex!"); }
		@.define exit_native () { pthread_mutex_destroy(&@#.mutex_ulinux); }
		@.define lock_mutex () { pthread_mutex_lock(&@#.mutex_ulinux); }
		@.define unlock_mutex () { pthread_mutex_unlock(&@#.mutex_ulinux); }
		@.define init_lock (INDEX) {
			@.check (pthread_cond_init(&@#.locks_ulinux[INDEX], NULL) != 0, "Could not init POSIX lock!");
		}
		@.define wait_for_lock (INDEX) {
			pthread_cond_wait(&@#.locks_ulinux[INDEX], &@#.mutex_ulinux);
		}
		@.define release_all (INDEX) {
			@.check (pthread_cond_broadcast(&@#.locks_ulinux[INDEX]) != 0, "Could not release POSIX lock!");
		}
		@.define free_lock (INDEX) {
			@.check (pthread_cond_broadcast(&@#.locks_ulinux[INDEX]) != 0, "Could not release POSIX lock!");
			// Do not use pthread_cond_destroy here! Although after a broadcast
			// there should no threads be left waiting for the cond, pthread_cond_destroy() 
			// blocks when there was more than 1 thread waiting for the cond before the broadcast!
		}
	}
	// --- klinux* implementation ---
	@.elsif ("PCONF" =~ m/^klinux/) {
		DECLARE_MUTEX(mutex_klinux);
		wait_queue_head_t locks_klinux[N_NATIVE_LOCKS];

		@.define init_native () { /* nothing to do */ }
		@.define exit_native () { /* nothing to do */ }	
		@.define lock_mutex () { down(&@#.mutex_klinux); }
		@.define unlock_mutex () { up(&@#.mutex_klinux); }
		@.define init_lock (INDEX) {
			init_waitqueue_head(&@#.locks_klinux[INDEX]);
		}
		@.define wait_for_lock (INDEX) {
			up(&@#.mutex_klinux);
			sleep_on(&@#.locks_klinux[INDEX]);
			down(&@#.mutex_klinux);
		}
		@.define release_all (INDEX) {
			wake_up_all(&@#.locks_klinux[INDEX]);
		}
		@.define free_lock (INDEX) {
			wake_up_all(&@#.locks_klinux[INDEX]);
		}
	}
	
	// --- YOUR IMPLEMENTATION HERE ---
	
	// --- dummy implementation
	@.else {
		@.define __BAD_ENVIRONMENT__ () { @.err ("Locks NYT in this environment!"); }
		@.define init_native () (__BAD_ENVIRONMENT__)
		@.define exit_native () (__BAD_ENVIRONMENT__)
		@.define lock_mutex () (__BAD_ENVIRONMENT__)
		@.define unlock_mutex () (__BAD_ENVIRONMENT__)
		@.define init_lock (INDEX) (__BAD_ENVIRONMENT__)
		@.define wait_for_lock (INDEX) (__BAD_ENVIRONMENT__)
		@.define free_lock (INDEX) (__BAD_ENVIRONMENT__)
	}
}

output :>out

	operation $output_init {
		if (@destr && !@constr) {
			exit_native ();
		}
		else if (@constr && !@destr) {
			int i;
			for (i = 0; i < N_NATIVE_LOCKS / WORD_SIZE; i++) {
				@#.free_locks[i] = (uns4)-1;
			}
			init_native ();
		}
		@success = TRUE;
	}
	
	operation $gadr {
		int word_index;
		for (word_index = 0; word_index < N_NATIVE_LOCKS / WORD_SIZE; word_index++) {
			if (@#.free_locks[word_index]) {
				int bit_index = ffs(@#.free_locks[word_index]) - 1;
				int index = (addr_t)(word_index * WORD_SIZE + bit_index);
				init_lock (index);
				@log_addr = (addr_t)index;
				@log_len = 1;
				@success = TRUE;
				break;
			}
		}
	}
	
	operation $padr {
		if (@log_addr < (addr_t)(N_NATIVE_LOCKS)) {
			int index = (int)@log_addr;
			int word_index = index / WORD_SIZE;
			int bit_index = index % WORD_SIZE;
			int mask = 1 << bit_index;
			if (!(@#.free_locks[word_index] & mask)) {
				@#.free_locks[word_index] |= mask;
				free_lock (index);
				@success = TRUE;
			}
		}
	}
	
	operation $lock {
		if (@log_addr < (addr_t)(N_NATIVE_LOCKS)) {
			int index = (int)@log_addr;
			int word_index = index / WORD_SIZE;
			int bit_index = index % WORD_SIZE;
			int mask = 1 << bit_index;
			if (!(@#.free_locks[word_index] & mask)) {
				@#.free_locks[word_index] |= mask;
				wait_for_lock ((int)@log_addr);
				@success = TRUE;
			}
		}
		else if (@log_addr == (addr_t)-1) {
			lock_mutex ();
			@success = TRUE;
		}
	}
	
	operation $unlock {
		if (@log_addr < (addr_t)(N_NATIVE_LOCKS)) {
			int index = (int)@log_addr;
			int word_index = index / WORD_SIZE;
			int bit_index = index % WORD_SIZE;
			int mask = 1 << bit_index;
			if (!(@#.free_locks[word_index] & mask)) {
				@#.free_locks[word_index] |= mask;
				release_all (index);
				@success = TRUE;
			}
		}
		else if (@log_addr == (addr_t)-1) {
			unlock_mutex ();
			@success = TRUE;
		}
	}

	operation $op {
		@success = FALSE;
		@.err ("This operation is not supported!");
	}
