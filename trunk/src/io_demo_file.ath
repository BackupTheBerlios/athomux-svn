  Author: Jens-Christian Korth
  Copyright: Jens-Christian Korth
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !.*, ulinux*

brick #io_demo_file
purpose IO Demo
desc
  Usage:
               +----------+     +------------+
               |  driver  |-----|            |
               +----------+     |            |
                                | io_arbiter |
               +----------+     |            |
               |          |-----|            |
  +------+     |          |     +------------+
  | lock |-----| io_queue |
  +------+     |          |     +------------+     +-------------+
               |          |-----| io_sched_* |-----| application |
               +----------+     +------------+     +-------------+
enddesc

@.if("PCONF" ne "klinux") {
static_data {
#define init_device_dummy_linux(brick, param, mand) \
        init_device_dummy_linux(brick, "testfile", mand)
}
}

instance #lock_ulinux as lock0;
wire :>lock as ##queue:<lock[0];
instance #lock_ulinux as lock1;
wire :>lock as ##queue:<lock[1];
instance #lock_ulinux as lock2;
wire :>lock as ##queue:<lock[2];
instance #lock_ulinux as lock3;
wire :>lock as ##queue:<lock[3];
instance #thread_ulinux as thread;
instance #io_queue as queue;
wire :>queue as ##arbiter:<queue;
wire :>queue as ##sched:<queue;
@.if("PCONF" eq "klinux") {
instance #device_block_klinux as driver;
} @.else {
instance #device_dummy_linux as driver;
}
wire :>out as ##arbiter:<driver;
instance #io_arbiter as arbiter;
wire :>dummy as ##thread:<exec;
instance #io_sched_elevator as sched;
wire :>out as ##adlim:<in;
instance #adapt_limit as adlim;
wire :>out as :<in;

local input :<in

output :>out

operation $output_init
{
  if(@destr) {
    @=call :<in$output_init @args;
    @=call ##arbiter:>dummy$output_init @args;
    @=call ##driver:>out$output_init @args;
    @=call ##queue:>queue(:0:)$output_init @args;
    @sect_code = 0;
    @=call ##lock0:>lock$output_init @args;
    @=call ##lock1:>lock$output_init @args;
    @=call ##lock2:>lock$output_init @args;
    @=call ##lock3:>lock$output_init @args;
  }
  if(@constr) {
    @=call ##lock0:>lock$output_init @args;
    @=call ##lock1:>lock$output_init @args;
    @=call ##lock2:>lock$output_init @args;
    @=call ##lock3:>lock$output_init @args;
    @=call ##queue:>queue(:0:)$output_init @args;
    @sect_code = 0;
    @.if("PCONF" eq "klinux") {
      @param = "/dev/athomux-partition";
    }
    @=call ##driver:>out$output_init @args;
    @=call ##thread:>cpu$output_init @args;
    @=call :<in$output_init @args;
  }
}

operation $trans,$wait,$transwait
{
  @=call :<in$OP_NAME @args;
}
