Author: Hardy Kahl
Copyright: Hardy Kahl
License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !klinux
context cconf: !klinux

brick #pipe

purpose pipe functionlality on logical streams

desc
  - do not forget to call $padr
    before you do another $gadr!
  - implements single user capabilities.
    see adapt_strm_multi if you need multi user
    capabilities.
  - with BUFSIZE the size of the pipe buffer is set.
    FIXME: allow dynamic buffer size given in @param at $init...

          +---------+
          |         |
    mem --+--     --+-- strmr
          |         |
  ilock --+--     --+-- strmw
          |         |
   stat --+--       |
          |         |
          +---------+

enddesc

example
endexample




static_data {
  #define MIN(a,b) ((a)<(b)?(a):(b))
  #define MAX(a,b) ((a)>(b)?(a):(b))

  #define BUFSIZE                (1024*40)

  #define LOCK_ADDR_MOD          0
  #define LOCK_ADDR_READER_WAIT  1
  #define LOCK_ADDR_WRITER_WAIT  2

  #define LOCK_MAND_READER       1
  #define LOCK_MAND_WRITER       2

  #define LOCK_MAND_WAIT1        1
  #define LOCK_MAND_WAIT2        2

  struct status_t {
    addr_t buf_start;
    addr_t buf_len;
    offs_t avail_start;
    len_t avail_len;
  };
}




// FIXME: use $brick_init !!!
operation $brick_init
{
  char const *param_orig=@param;
  @param="WA";
  INIT_ALL_INPUTS();
  INIT_ALL_INSTANCES();
  INIT_ALL_OUTPUTS();
  @param=param_orig;
}
output :>init
operation $output_init
{
  if (strcmp(@param,"WA")==0) { @success=TRUE; return; } // FIXME: workaround, init later

  success_t succ;

  if (@destr && @constr) {
    // flush state
    PC_FLUSH(PIPE_STAT);
  }
  else if (@destr) {
    // deinstantiate brick
    struct status_t *status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));
    @.check(status==NULL, "cannot get pointer on status information");

    @=call :<mem$delete [@mandate] (status->buf_start, status->buf_len) => (succ);
    @.check(succ!=TRUE, "delete failed");
  }
  else if (@constr) {
    // instantiate brick

    struct status_t *status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));

    if (status==NULL) {
      // no status available in input nest. creating new one...
      success_t succ;

      @=call :<stat$create [@mandate] (0, sizeof(struct status_t)) => (succ);
      @.check(succ!=TRUE, "cannot allocate memory for status information");

      status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));
      @.check(status==NULL, "FIXME: switch to error state - cannot get pointer on status information");

      // initializing status
      @=call :<mem$gadrcreate [@mandate] (BUFSIZE) => (succ, status->buf_start, status->buf_len);
      @.check(succ!=TRUE, "gadrcreate failed");
    
      status->avail_start = 0;
      status->avail_len = 0;
    }
  }

  @success = TRUE;
}




output :>strmr




operation $gadr
{
  struct status_t *status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));
  @.check(status==NULL, "cannot get pointer on status information");

  @.check(@reader!=TRUE, "cannot write in unidirectional readable stream");

  success_t succ;
  
  @=call :<ilock$lock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot get lock");

  len_t block_avail = MIN(status->buf_len - status->avail_start, status->avail_len);

  if (@log_len>block_avail) {
    if (@action!=action_wait) {
      // we do not need to wait
      // release locks
      @=call :<ilock$unlock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

      return;
    }

    // let's see if it is worth waiting...
    if (status->buf_len - status->avail_start < @log_len) {
      // we will never be able to satisfy request
      // release locks
      @=call :<ilock$unlock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

      @.err("cannot satisfy request");
    }

    // wait for more data
    while (@log_len>block_avail) {
      @=call :<ilock$lock [LOCK_MAND_WAIT1] (LOCK_ADDR_READER_WAIT, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot get lock - FIXME: error state or release other locks");
      if (succ!=TRUE) {
        // release modify lock
        @=call :<ilock$unlock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
        @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
        @.err("cannot get lock");
      }
      
      // release modify lock to prevent blocking the writer
      @=call :<ilock$unlock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

      @=call :<ilock$lock [LOCK_MAND_WAIT2] (LOCK_ADDR_READER_WAIT, 1, lock_write) => (succ);
      if (succ!=TRUE) {
        // release wait lock
        @=call :<ilock$unlock [LOCK_MAND_WAIT1] (LOCK_ADDR_READER_WAIT, 1, lock_write) => (succ);
        @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
        @.err("cannot get lock");
      }
      
      // new data is now available
      // release wait lock and get modify lock
      
      @=call :<ilock$unlock [LOCK_MAND_WAIT2] (LOCK_ADDR_READER_WAIT, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
      
      @=call :<ilock$lock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot get lock - FIXME: error state or release other locks");
      
      block_avail = MIN(status->buf_len - status->avail_start, status->avail_len);
    }
  }

  @log_addr = status->buf_start + status->avail_start;
  if (@try_len == 0) @log_len = block_avail;
  else @log_len = MIN(block_avail, MAX(@log_len, @try_len));

  // release modify lock
  @=call :<ilock$unlock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

  @success = TRUE;
}




operation $create
{
  @.err("cannot create in unidirectional readable stream");
}




operation $delete
{
  struct status_t *status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));
  @.check(status==NULL, "cannot get pointer on status information");

  @.check(@log_addr!=status->buf_start+status->avail_start, "invalid address");

  success_t succ;
  
  @=call :<ilock$lock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot get lock");

  status->avail_start = (status->avail_start + @log_len) % status->buf_len;
  status->avail_len -= @log_len;

  // release modify lock
  @=call :<ilock$unlock [LOCK_MAND_READER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

  @success = TRUE;
}




operation $padr
{
  @.check(@reader!=TRUE, "cannot write in unidirectional readable stream");

  success_t succ;

  // wakeup writer
  @=call :<ilock$unlock [LOCK_MAND_WAIT1] (LOCK_ADDR_WRITER_WAIT, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

  @success = TRUE;
}




operation $op
{
  @=call :<mem$op [@mandate] (@args);
}




output :>strmw




operation $gadr
{
  struct status_t *status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));
  @.check(status==NULL, "cannot get pointer on status information");

  @.check(@reader!=FALSE, "cannot read in unidirectional writable stream");

  success_t succ;
  
  @=call :<ilock$lock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot get lock");

  offs_t writer_start = (status->avail_start + status->avail_len) % status->buf_len;
  len_t block_avail = MIN(status->buf_len - writer_start, status->buf_len - status->avail_len);

  if (@log_len>block_avail) {
    if (@action!=action_wait) {
      // we do not need to wait
      // release locks
      @=call :<ilock$unlock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

      return;
    }

    // let's see if it is worth waiting...
    if (status->buf_len - writer_start < @log_len) {
      // we will never be able to satisfy request
      // release locks
      @=call :<ilock$unlock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

      @.err("cannot satisfy request");
    }

    // wait for free memory
    while (@log_len>block_avail) {
      @=call :<ilock$lock [LOCK_MAND_WAIT1] (LOCK_ADDR_WRITER_WAIT, 1, lock_write) => (succ);
      if (succ!=TRUE) {
        // release modify lock
        @=call :<ilock$unlock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
        @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
        @.err("cannot get lock");
      }
      
      // release modify lock to prevent blocking the reader
      @=call :<ilock$unlock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
      
      @=call :<ilock$lock [LOCK_MAND_WAIT2] (LOCK_ADDR_WRITER_WAIT, 1, lock_write) => (succ);
      if (succ!=TRUE) {
        // release wait lock
        @=call :<ilock$unlock [LOCK_MAND_WAIT1] (LOCK_ADDR_WRITER_WAIT, 1, lock_write) => (succ);
        @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
        @.err("cannot get lock");
      }
      
      // new free memory is now available
      // release wait lock and get modify lock
      
      @=call :<ilock$unlock [LOCK_MAND_WAIT2] (LOCK_ADDR_WRITER_WAIT, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");
      
      @=call :<ilock$lock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
      @.check(succ!=TRUE, "cannot get lock");
      
      writer_start = (status->avail_start + status->avail_len) % status->buf_len;
      block_avail = MIN(status->buf_len - writer_start, status->buf_len - status->avail_len);
    }
  }

  @log_addr = status->buf_start + writer_start;
  if (@try_len == 0) @log_len = block_avail;
  else @log_len = MIN(block_avail, MAX(@log_len, @try_len));

  // release modify lock
  @=call :<ilock$unlock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

  @success = TRUE;
}




operation $create
{
  struct status_t *status = PC_GET_DIRTY(PIPE_STAT, 0, sizeof(struct status_t));
  @.check(status==NULL, "cannot get pointer on status information");

  @.check (@log_addr!=status->buf_start + (status->avail_start + status->avail_len) % status->buf_len, "invalid address");

  success_t succ;
  
  @=call :<ilock$lock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot get lock");

  status->avail_len += @log_len;

  // release modify lock
  @=call :<ilock$unlock [LOCK_MAND_WRITER] (LOCK_ADDR_MOD, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

  @success = TRUE;
}




operation $delete
{
  @.err("cannot delete in unidirectional writeable stream");
}




operation $padr
{
  @.check(@reader!=FALSE, "cannot read in unidirectional writable stream");

  success_t succ;

  // wakeup reader
  @=call :<ilock$unlock [LOCK_MAND_WAIT1] (LOCK_ADDR_READER_WAIT, 1, lock_write) => (succ);
  @.check(succ!=TRUE, "cannot release lock - FIXME: switch to error state");

  @success = TRUE;
}




operation $op
{
  @=call :<mem$op [@mandate] (@args);
}




input :<mem
input :<ilock




input :<stat
use PC PIPE_STAT [1];
