  Author: Florian Niebling, Marcel Kilgus
  Copyright: Florian Niebling, Marcel Kilgus
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !.*, x86

brick #posix_x86
purpose wrapper brick that creates a thread for the syscall mechanism
desc
enddesc

static_header {
#include "types.h"
}

data {
    task_struct *task;
}

instance #syscall_x86 as sys;
alias :<fs as :<fs;
alias :<process as :<process;
wire :<state as :>stat;
alias :<syscall as :<syscall;

instance #file_syscalls_ulinux as file;
alias :<fd[] as :<fd[];
wire :>syscall as ##sys:<fd;
wire :<state as :>stat;

input :<state

local output :>stat

operation $op
{
	//printf("output :>stat operation %s\n", op_names[@op_code]);
	@=call :<state(:@sect_code:)$op @args;
}

output :>dummy

operation $output_init
{
	if (@destr) {
		@success = TRUE;
		return;
	}
	if (!@constr) return;

	@=call :>stat$output_init @args;
	printf("posix: 1\n");
	@=call ##file:>dummy$output_init @args : @param;
	@=call ##file:>syscall$output_init @args : @param;

  	@=call ##sys:>main$output_init @args : @param;
	printf("posix: 2\n");

	@success = TRUE;
}
