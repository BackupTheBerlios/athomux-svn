  Author: Jens-Christian Korth
  Copyright: Jens-Christian Korth
  License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: !.*, ulinux.*

brick #demo_locking
purpose test for threads and locking

static_data {
#include <unistd.h>
}


instance #lock_ulinux as lock;
wire :>lock as ##sub:<lock;
instance #thread_ulinux as thread;
wire :>cpu as :<sub;
instance #demo_locking_sub as sub;
wire :>out as ##thread:<exec;

local input :<sub

input :<strat

output :>program

operation $output_init
{
  int i;

  @=call ##lock:>lock$output_init @args;
  @=call ##sub:>out$output_init @args;

  if(@constr) {

    @=call ##lock:>lock$lock [30] (0, 100) => (@success);
    @.check(!@success, "initial lock failed");

    for(i=0; i<20; i++) {
      @success = FALSE;
      @=call :<sub$trans [i] @args;
      @.check(!@success, "trans failed");
    }

    printf("---------------------------\n");

    @=call ##lock:>lock$unlock [30] (0, 100) => (@success);
    @.check(!@success, "releasing initial lock failed");
    printf("--sleeping--\n");
    sleep(3);
  }
}
