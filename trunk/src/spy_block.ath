Author: Roland Niese
Copyright: Roland Niese
License: see files SOFTWARE-LICENSE, PATENT-LICENSE

context pconf: ulinux*
context cconf: ulinux*

brick #spy_block

purpose Catch incoming ops and let the user decide about their forthcoming.

desc
:<in <---> :>out - path operations take through this brick.
:<tmp - information about blocked ops is stored here. Must be an exclusive nest supporting pairwise $create/$delete as well as $get+$put+$trans+$wait

parameters to $brick_init:
title=String         --- set the window title
mode=(trace|block)   --- specify whether all ops at :<in and :>out should be just traced or temporarily blocked.

All operations coming through this brick get logged in a separate window and can be even blocked if desired.
In "trace" mode, all operations coming through this brick simply get logged.
In "block" mode, a list of currently blocked operations is shown to the user. She can selecively release one of those operations.
A handy tool when testing bricks in multiuser environments: with this brick put in front of a connector, the order in which concurrent operations come in can be influenced, and the behaviour of the connector tested.
Of course, this brick is multiuser-safe.

TODO: right now, combined operations are not handled specifically. Should.
enddesc

// root record of doubly linked list of blocked ops. Additional space is for a short description string.
@.define ROOT_REC_SIZE (sizeof (struct rec) + 8)

static_data {
	#include "stdio.h"
	#include "ath_stdio.h"
	#include "param_scanner.h"
	
	// brick modes: block incoming operations, or just trace them?
	enum mode_t { MODE_TRACE, MODE_BLOCK };
	
	// descriptor of an operation, with opcode and functions for printing the essential arguments or results from "args"
	struct op_desc {
		op_t op;
		char *(*op_args_to_string)(char *buf, int bufsize, struct args *args);
		char *(*op_result_to_string)(char *buf, int bufsize, struct args *args);
	};
	
	// describes one operation that has been caught inside this brick
	// characterized by a unique id number and a description string
	struct rec {
		addr_t next_addr;
		len_t next_len;
		addr_t prev_addr;
		len_t prev_len;
		addr_t id;
		char description[0];
	};

	// Default argument print function, does not know what to print
	char *default_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(@args)");
	}

	// Default result print function. Just prints out success. Often sufficient.
	char *default_result_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, " => (%o)", args->success);
	}
	
	// $trans arguments
	char *trans_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, 0x%P, dir=%d, prio=%r)", args->log_addr, args->log_addr + args->log_len, args->phys_addr, args->direction, args->prio);
	}

	// $trans results
	char *trans_result_to_string(char *buf, int bufsize, struct args *args) {
		if (args->success) {
			return athsnprintf(buf, bufsize, " => (%o, len=0x%P)", args->success, args->phys_len);
		}
		else {
			return default_result_to_string(buf, bufsize, args);
		}
	}
	
	// $wait arguments
	char *wait_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, prio=%r, action=%a)", args->log_addr, args->log_addr + args->log_len, args->prio, args->action);
	}

	// $get arguments
	char *get_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, write=%y)", args->log_addr, args->log_addr + args->log_len, args->forwrite);
	}
	
	// $get results
	char *get_result_to_string(char *buf, int bufsize, struct args *args) {
		if (args->success) {
			return athsnprintf(buf, bufsize, " => (%o, 0x%P..0x%P, vers=%v)", args->success, args->phys_addr, args->phys_addr + args->phys_len, args->version);
		}
		else {
			return default_result_to_string(buf, bufsize, args);
		}
	}
	
	// $put arguments
	char *put_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, prio=%r", args->log_addr, args->log_addr + args->log_len, args->prio);
	}
	
	// $gadr arguments
	char *gadr_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L (up to 0x%L), reader=%y, exclu=%y, action=%a)", args->log_len, args->try_len, args->reader, args->exclu, args->action);
	}

	// $gadr results
	char *gadr_result_to_string(char *buf, int bufsize, struct args *args) {
		if (args->success) {
			return athsnprintf(buf, bufsize, " => (%o, 0x%L..0x%L)", args->success, args->log_addr, args->log_addr + args->log_len);
		}
		else {
			return default_result_to_string(buf, bufsize, args);
		}
	}

	// $padr arguments
	char *padr_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, reader=%y)", args->log_addr, args->log_len, args->reader);
	}
	
	// $create arguments
	char *create_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, clr=%y, melt=%y)", args->log_addr, args->log_addr + args->log_len, args->clear, args->melt);
	}

	// $delete arguments
	char *delete_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, melt=%y)", args->log_addr, args->log_addr + args->log_len, args->melt);
	}

	// $move arguments
	char *move_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, min--> 0x%L..0x%L max--> 0x%L..0x%L)", args->log_addr, args->log_addr + args->log_len, args->log_addr + args->offset, args->log_addr + args->log_len + args->offset, args->log_addr + args->offset_max, args->log_addr + args->log_len + args->offset_max);
	}
	
	// $move results
	char *move_result_to_string(char *buf, int bufsize, struct args *args) {
		if (args->success) {
			return athsnprintf(buf, bufsize, " => (%o, --> 0x%L..0x%L)", args->log_addr + args->offset, args->log_addr + args->log_len + args->offset);
		}
		else {
			return default_result_to_string(buf, bufsize, args);
		}
	}
	
	// $lock arguments
	char *lock_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L.. 0x%L..0x%L ..0x%L, d=%k, a=%k, %a)", args->try_addr, args->log_addr, args->log_addr + args->log_len, args->try_addr + args->try_len, args->data_lock, args->addr_lock, args->action);
	}
	
	// $lock results
	char *lock_result_to_string(char *buf, int bufsize, struct args *args) {
		if (args->success) {
			return athsnprintf(buf, bufsize, " => (%o, 0x%L..0x%L)", args->success, args->try_addr, args->try_addr + args->try_len);
		}
		else {
			return default_result_to_string(buf, bufsize, args);
		}
	}
	
	// $unlock arguments
	char *unlock_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L)", args->try_addr, args->try_addr + args->try_len);
	}
	
	// $unlock results
	char *retract_args_to_string(char *buf, int bufsize, struct args *args) {
		return athsnprintf(buf, bufsize, "(0x%L..0x%L, %r)", args->try_addr, args->try_addr + args->try_len, args->prio);
	}
	
	// List of operations with supported individual printing. Operations not listed here will be logged by the default functions.
	struct op_desc op_descs[] = {
		{ opcode_trans, trans_args_to_string, trans_result_to_string },
		{ opcode_wait, wait_args_to_string, default_result_to_string },
		{ opcode_get, get_args_to_string, get_result_to_string },
		{ opcode_put, put_args_to_string, default_result_to_string },
		{ opcode_gadr, gadr_args_to_string, gadr_result_to_string },
		{ opcode_padr, padr_args_to_string, default_result_to_string },
		{ opcode_create, create_args_to_string, default_result_to_string },
		{ opcode_delete, delete_args_to_string, default_result_to_string },
		{ opcode_move, move_args_to_string, move_result_to_string },
		{ opcode_lock, lock_args_to_string, lock_result_to_string },
		{ opcode_unlock, unlock_args_to_string, default_result_to_string },
		{ opcode_retract, retract_args_to_string, default_result_to_string },
		{ opcode_brick_max, default_args_to_string, default_result_to_string }
	};

	/* Creates a string representing an operation call.
	 * buf - the buffer to write the string to
	 * bufsize - maximum size of buf (including trailing '\0').
	 * args_now - the current arguments. When calling, it contains the input arguments, when returning, it contains the results.
	 * args_old - !=NULL indicates a return from a call, it contains the arguments of the former op call then.
	 * param - parameter string provided with the call.
	 */
	char *op_to_string(char *buf, int bufsize, struct args *args_now, struct args *args_old, const char *param) {
		struct op_desc *op_desc;
		char *const bufend = buf + bufsize;
		char *bufpos;
		for (op_desc = op_descs; op_desc->op != args_now->op_code && op_desc->op < opcode_brick_max; op_desc++);
		bufpos  = athsnprintf(buf, bufsize, "$%s [%m] ", op_names[args_now->op_code], args_now->mandate);
		bufpos = op_desc->op_args_to_string(bufpos, bufend - bufpos, args_old ? args_old : args_now);
		if (param) {
			bufpos = athsnprintf(bufpos, bufend - bufpos, ": \"%s\"", param);
		}
		if (args_old) {
			bufpos = op_desc->op_result_to_string(bufpos, bufend - bufpos, args_now);
		}
		return bufpos;
	}	
}

data {
	mode_t mode;
}

instance #lock_native as locks;
instance #map_split_static as split;
wire :<in as :>wa_tmp;
wire :>out0 as ##console:<buf;
wire :>out1 as :<state;
instance #device_console_ulinux as console;
instance #thread_ulinux as async;
wire :<exec as :>usrinp;

// Gets a list record with specified address and length from the :<state nest
// Returns a pointer to it (NULL on failure)
@.func get_rec (addr_t rec_addr, len_t rec_len) => (struct rec *rec) {
	success_t ok;
	paddr_t paddr;
	plen_t plen;
	//trace (":<state$get [0x%llX..0x%llX]\n", rec_addr, rec_addr + rec_len);
	@=outputcall :<state$get (rec_addr, rec_len) => (ok, paddr, plen);
	if (ok && plen == (plen_t)rec_len) {
		rec = MAKE_PTR (paddr);
	}
	else {
		rec = NULL;
		@.err ("Could not get op record!");
	}
}

// Releases the specified current record into the nest (via $put).
// Returns logical address and length as well as a pointer to the next list record.
// If there is no next record then next_rec_addr==0 and next_rec==NULL
@.func seek_next_rec_from (const addr_t rec_addr, const len_t rec_len, const struct rec *const rec) => (addr_t next_rec_addr, len_t next_rec_len, struct rec *next_rec) {
	success_t ok;
	next_rec_addr = rec->next_addr;
	next_rec_len = rec->next_len;
	@=outputcall :<state$put (rec_addr, rec_len) => (ok);
	@.check (!ok, "Could not put record [0x%llX..0x%llX]!", rec_addr, rec_addr + rec_len);
	if (next_rec_addr) {
		get_rec (next_rec_addr, next_rec_len) => (next_rec);
	}
	else {
		next_rec = NULL;
	}
}

// Returns the first list record (or addr==0/rec==NULL on empty list)
@.func seek_first_rec () => (addr_t first_rec_addr, len_t first_rec_len, struct rec *first_rec) {
	struct rec *root_rec;
	first_rec_addr = 0;
	first_rec_len = 0;
	first_rec = NULL;
	get_rec (0, ROOT_REC_SIZE) => (root_rec);
	seek_next_rec_from (0, ROOT_REC_SIZE, root_rec) => (first_rec_addr, first_rec_len, first_rec);
}

// Print list of ops currently locked inside the brick.
@.func print_ops () {
	addr_t rec_addr;
	len_t rec_len;
	struct rec *rec;
	athpipeprintf (&@##console:>write, TRUE, 0, "=== Operations currently stuck in this brick, enter id to release ===\n");
	seek_first_rec () => (rec_addr, rec_len, rec);
	while (rec) {
		athpipeprintf (&@##console:>write, TRUE, 0, "id=%L op=%s\n", rec->id, rec->description);
		seek_next_rec_from (rec_addr, rec_len, rec) => (rec_addr, rec_len, rec);
	}
}

// adds a new record to the list of blocked ops
@.func add_rec (addr_t id, const char *description) => (addr_t result_rec_addr, len_t result_rec_len, struct rec *result_rec) {
	addr_t last_rec_addr, new_rec_addr;
	len_t last_rec_len, new_rec_len;
	struct rec *root_rec, *last_rec, *new_rec;
	success_t ok;
	paddr_t paddr;
	plen_t plen;
	
	result_rec_addr = 0;
	result_rec_len = 0;
	result_rec = NULL;
	// find last record in list
	get_rec (0, ROOT_REC_SIZE) => (root_rec);
	@.check (!root_rec, "Could not get op list root rec!");
	if (root_rec->prev_addr) {
		// there is a last record
		last_rec_addr = root_rec->prev_addr;
		last_rec_len = root_rec->prev_len;
		get_rec (last_rec_addr, last_rec_len) => (last_rec);
	}
	else {
		// root record is the last one --> list is empty
		last_rec_addr = 0;
		last_rec_len = ROOT_REC_SIZE;
		last_rec = root_rec;
	}
	// create and initialize a new list record (space behind the last record in the list is free)
	new_rec_addr = last_rec_addr + last_rec_len;
	new_rec_len = sizeof (struct rec) + strlen(description) + 1;
	@=outputcall :<state$createget (new_rec_addr, new_rec_len) => (ok, paddr, plen);
	@.check (!ok || plen < (plen_t)new_rec_len, "Could not create space for new record!");
	new_rec = MAKE_PTR (paddr);
	new_rec->prev_addr = last_rec_addr;
	new_rec->prev_len = last_rec_len;
	new_rec->next_addr = 0;
	new_rec->next_len = ROOT_REC_SIZE;
	new_rec->id = id;
	strcpy(new_rec->description, description);
	// append the record to the end of the list
	last_rec->next_addr = root_rec->prev_addr = new_rec_addr;
	last_rec->next_len = root_rec->prev_len = new_rec_len;
	// return temporarily acquired resources
	if (last_rec_addr) {
		@=outputcall :<state$put (last_rec_addr, last_rec_len) => ();
	}
	@=outputcall :<state$put (0, ROOT_REC_SIZE) => ();
	// finish, signalling success
	result_rec_addr = new_rec_addr;
	result_rec_len = new_rec_len;
	result_rec = new_rec;
}

// removes a record from the list of blocked ops
@.func remove_rec (addr_t rec_addr, len_t rec_len, struct rec *this_rec) => (success_t ok) {
	struct rec *prev_rec, *next_rec;
	ok = FALSE;
	@.check (!rec_addr, "Tried to remove the root record from the list!");
	
	get_rec (this_rec->prev_addr, this_rec->prev_len) => (prev_rec);
	@.check (!prev_rec, "Could not get previous record");
	prev_rec->next_addr = this_rec->next_addr;
	prev_rec->next_len = this_rec->next_len;
	@=outputcall :<state$put (this_rec->prev_addr, this_rec->prev_len) => (ok);
	
	get_rec (this_rec->next_addr, this_rec->next_len) => (next_rec);
	@.check (!next_rec, "Could not get next record");
	next_rec->prev_addr = this_rec->prev_addr;
	next_rec->prev_len = this_rec->prev_len;
	@=outputcall :<state$put (this_rec->next_addr, this_rec->next_len) => (ok);
	
	@=outputcall :<state$putdelete (rec_addr, rec_len) => (ok);
}

// Print out the current operation on the console.
@.func trace_op (struct args * args_in) {
	char buf[512];
	op_to_string(buf, sizeof buf, @args, args_in, @param);
	trace ("Incoming operation %s\n", buf);
	athpipeprintf(&@##console:>write, TRUE, @mandate,"%s\n", buf);
}

// Block the current operation, add it to the list and print out the list.
@.func block_op (struct args *args_in) {
	success_t ok;
	addr_t lock_id;
	addr_t rec_addr;
	len_t rec_len;
	struct rec *rec;
	char buf[512];
	
	trace ("Converting op to string.\n");
	op_to_string(buf, sizeof buf, @args, args_in, @param);
	@success = FALSE;
	trace ("Blocking incoming operation %s\n", buf);
	@=outputcall ##locks:>out$lock ((addr_t)-1, 1) => (ok);
	@.check (!ok, "Could not grab mutex!");
	@=outputcall ##locks:>out$gadr (1) => (ok, lock_id);
	@.check (!ok, "Could not allocate lock!");
	add_rec (lock_id, buf) => (rec_addr, rec_len, rec);
	@.check (!rec_addr, "Could not add op %s to the list", buf);
	print_ops ();
	@=outputcall ##locks:>out$lock (lock_id, 1) => (ok);
	@.check (!ok, "Could not sleep on the lock!");
	trace ("Operation %s released\n", buf);
	remove_rec (rec_addr, rec_len, rec) => (ok);
	@.check (!ok, "Could not remove op record from the list!");
	print_ops ();
	@=outputcall ##locks:>out$padr (lock_id, 1) => (ok);
	@.check (!ok, "Could not release lock!");
	@=outputcall ##locks:>out$unlock ((addr_t)-1, 1) => (ok);
	@.check (!ok, "Could not release mutex!");
	@success = TRUE;
}

operation $brick_init {
	if (!@constr && @destr) {
		INIT_ALL_OUTPUTS ();
		INIT_ONE_INSTANCE (locks, "");
		INIT_ONE_INSTANCE (console, "");
		INIT_ONE_INSTANCE (async, "");
		INIT_ONE_INSTANCE (split, "");
		INIT_ALL_INPUTS ();
	}
	if (@constr && !@destr) {
		const char *arg;
		int arglen;
		char console_param[256];
		success_t ok;
		// manually initialize local inputs and outputs
		trace ("Initializing #spy_block\n");
		@=inputcall :<in$input_init (@destr, @constr) => (ok);
		@=inputcall :<tmp$input_init (@destr, @constr) => (ok);
		@=outputcall :>wa_tmp$output_init (@destr, @constr) => (ok);
		@.check (!ok, "#:>wa_tmp$output_init failed!");
		@=outputcall :>usrinp$output_init (@destr, @constr) => (ok);
		@.check (!ok, "#:>usrinp$output_init failed!");
		@=inputcall :<state$input_init (@destr, @constr) => (ok);
		@.check (!ok, "#:<state$input:init failed!");
		@success = FALSE;
		INIT_ONE_INSTANCE (split, "");
		INIT_ONE_INSTANCE (async, "keep_mandates");
		@success = FALSE;
		if (param_check (@param, "title", &arg, &arglen)) {
			if (arglen > sizeof console_param - 1) {
				arglen = sizeof console_param - 1;
			}
			memcpy(console_param, arg, arglen);
			console_param[arglen] = '\0';
		}
		else {
			athsnprintf(console_param, sizeof console_param, "#spy_block [%m]", @#._mand);
		}
		INIT_ONE_INSTANCE (console, console_param);
		@.check (!@success, "Could not start console!");
		INIT_ONE_INSTANCE (locks, "");
		@=outputcall :>out$output_init (@destr, @constr) => (ok);
	}
	@success = TRUE;
}

local input :<state

local output :>wa_tmp

	operation $op {
		@=outputcall :<tmp$op @args;
	}

input :<tmp

	attr physio = all
	attr logio = all
	attr dyn = {create,delete}
	attr addr = none
	attr lock = none
	attr avail = exclusive
	
local output :>usrinp

	// asynchronous, infinite op reading user commands to release blocked operations
	operation $op {
		success_t ok;
		char readbuf[32];
		plen_t readbuf_len;
		int id;
		while (TRUE) {
			@=outputcall ##console:>read$gadrtranswaitdeletepadr (MAKE_PADDR (readbuf), (plen_t)sizeof readbuf) => (ok, readbuf_len);
			@.check (!ok, "Could not read from console!");
			readbuf[readbuf_len] = '\0';
			if (sscanf(readbuf, "%i", &id) == 1) {
				addr_t rec_addr;
				len_t rec_len;
				struct rec *rec;
				seek_first_rec () => (rec_addr, rec_len, rec);
				while (rec && rec->id != id) {
					seek_next_rec_from (rec_addr, rec_len, rec) => (rec_addr, rec_len, rec);
				}
				if (rec) {
					// release the blocked op
					//trace ("User releases operation %s\n", rec->description);
					@=outputcall ##locks:>out$unlock (rec->id, 1) => (ok);
					@.check (!ok, "Could not free lock holding op!");
				}
			}
			else {
				trace ("Invalid input \"%s\"\n", readbuf);
			}
			// wait for next user input
		}
	}

input :<in

	attr physio = :>out
	attr logio = :>out
	attr dyn = :>out
	attr addr = :>out
	attr lock = :>out

	operation $input_init {
		@success = TRUE;
	}

	operation $op {
		struct args args_in;
		trace ("blocking operation %d (log_addr=0x%llX, log_len=0x%llX) &mode=%p &brick=%p\n", @op_code, @log_addr, @log_len, &@#.mode, _brick);
		trace ("_on==%p #:<in==%p #:<in.ops=%p #spy_block.in.ops==%p\n", _on, &_brick->_conn_in, _brick->_conn_in._input_.ops, ops_spy_block_in);
		if (@#.mode == MODE_TRACE) {
			memcpy(&args_in, @args, sizeof args_in);
			trace_op (NULL);
			@=inputcall :>out$op (@args);
			trace_op (&args_in);
		}
		else if (@#.mode == MODE_BLOCK) {
			memcpy(&args_in, @args, sizeof args_in);
			block_op (NULL);
			@.check (!@success, "Operation blocking failed!");
			memcpy(@args, &args_in, sizeof args_in);
			@=inputcall :>out$op (@args);
			args_in.success = @success;
			@success = FALSE;
			block_op (&args_in);
			@.check (!@success, "Operation blocking failed!");
			@success = args_in.success;
		}
	}

output :>out

	attr physio = :<in
	attr logio = :<in
	attr dyn = :<in
	attr addr = :<in
	attr lock = :<in

	operation $output_init {
		if (@destr) {
			// Destruction: release all pending operations.
			success_t ok;
			addr_t first_rec_addr;
			len_t first_rec_len;
			struct rec *first_rec;
			@=outputcall ##locks:>out$lock ((addr_t)-1, 1) => (ok);
			do {
				@.check (!ok, "Could not grab mutex!");
				seek_first_rec () => (first_rec_addr, first_rec_len, first_rec);
			} while (first_rec);
			@=outputcall ##locks:>out$unlock ((addr_t)-1, 1) => (ok);
			@.check (!ok, "Could not release mutex!");
		}
		if (@constr) {
			trace ("Initializing #spy_block:>out\n");
			// Construction: init list of pending ops.
			success_t ok;
			paddr_t paddr;
			plen_t plen;
			struct rec *root_rec;
			const char *arg;
			int arglen;
			@.check (!param_check(@param, "mode", &arg, &arglen), "No argument \"mode=(trace|block) specified!");
			if (strncmp(arg, "trace", arglen) == 0) {
				@#.mode = MODE_TRACE;
			}
			else {
				@#.mode = MODE_BLOCK;
			}
			// initialize state structure
			@=outputcall :<state$createget (0, ROOT_REC_SIZE) => (ok, paddr, plen);
			@.check (!ok || plen < ROOT_REC_SIZE, "Could not create root record of list of blocked ops!");
			root_rec = MAKE_PTR (paddr);
			root_rec->next_addr = 0;
			root_rec->next_len = ROOT_REC_SIZE;
			root_rec->prev_addr = 0;
			root_rec->prev_len = ROOT_REC_SIZE;
			root_rec->id = (addr_t)-2;
			sprintf(root_rec->description, "ROOT");
			@=outputcall :<state$put (0, ROOT_REC_SIZE) => (ok);
			@.check (!ok, "Could not put root record!"); // (not expected to happen, but who knows...)
			// start the internal thread reading user input (and releasing blocked ops)
			@=outputcall ##async:>cpu$wait (0, 0) => (ok);
			@.check (!ok, "Could not start reader thread!");
			if (@#.mode == MODE_TRACE) {
				athpipeprintf(&@##console:>write, TRUE, 0, "Operations that passed this brick:\n");
			}
		}
		@success = TRUE;
	}

	operation $op {
		struct args args_in;
		if (@#.mode == MODE_TRACE) {
			memcpy(&args_in, @args, sizeof args_in);
			trace_op (NULL);
			@=outputcall :<in$op (@args);
			trace_op (&args_in);
		}
		else if (@#.mode == MODE_BLOCK) {
			memcpy(&args_in, @args, sizeof args_in);
			@success = FALSE;
			block_op (NULL);
			@.check (!@success, "Operation blocking failed!");
			memcpy(@args, &args_in, sizeof args_in);
			@=outputcall :<in$op @args;
			args_in.success = @success;
			block_op (&args_in);
			@.check (!@success, "Operation blocking failed!");
			@success = args_in.success;
		}
	}
